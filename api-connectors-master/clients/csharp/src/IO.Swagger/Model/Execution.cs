/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Raw Order and Balance Data
    /// </summary>
    [DataContract]
    public partial class Execution :  IEquatable<Execution>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Execution" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Execution() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Execution" /> class.
        /// </summary>
        /// <param name="ExecID">ExecID (required).</param>
        /// <param name="OrderID">OrderID.</param>
        /// <param name="ClOrdID">ClOrdID.</param>
        /// <param name="ClOrdLinkID">ClOrdLinkID.</param>
        /// <param name="Account">Account.</param>
        /// <param name="Symbol">Symbol.</param>
        /// <param name="Side">Side.</param>
        /// <param name="LastQty">LastQty.</param>
        /// <param name="LastPx">LastPx.</param>
        /// <param name="UnderlyingLastPx">UnderlyingLastPx.</param>
        /// <param name="LastMkt">LastMkt.</param>
        /// <param name="LastLiquidityInd">LastLiquidityInd.</param>
        /// <param name="SimpleOrderQty">SimpleOrderQty.</param>
        /// <param name="OrderQty">OrderQty.</param>
        /// <param name="Price">Price.</param>
        /// <param name="DisplayQty">DisplayQty.</param>
        /// <param name="StopPx">StopPx.</param>
        /// <param name="PegOffsetValue">PegOffsetValue.</param>
        /// <param name="PegPriceType">PegPriceType.</param>
        /// <param name="Currency">Currency.</param>
        /// <param name="SettlCurrency">SettlCurrency.</param>
        /// <param name="ExecType">ExecType.</param>
        /// <param name="OrdType">OrdType.</param>
        /// <param name="TimeInForce">TimeInForce.</param>
        /// <param name="ExecInst">ExecInst.</param>
        /// <param name="ContingencyType">ContingencyType.</param>
        /// <param name="ExDestination">ExDestination.</param>
        /// <param name="OrdStatus">OrdStatus.</param>
        /// <param name="Triggered">Triggered.</param>
        /// <param name="WorkingIndicator">WorkingIndicator.</param>
        /// <param name="OrdRejReason">OrdRejReason.</param>
        /// <param name="SimpleLeavesQty">SimpleLeavesQty.</param>
        /// <param name="LeavesQty">LeavesQty.</param>
        /// <param name="SimpleCumQty">SimpleCumQty.</param>
        /// <param name="CumQty">CumQty.</param>
        /// <param name="AvgPx">AvgPx.</param>
        /// <param name="Commission">Commission.</param>
        /// <param name="TradePublishIndicator">TradePublishIndicator.</param>
        /// <param name="MultiLegReportingType">MultiLegReportingType.</param>
        /// <param name="Text">Text.</param>
        /// <param name="TrdMatchID">TrdMatchID.</param>
        /// <param name="ExecCost">ExecCost.</param>
        /// <param name="ExecComm">ExecComm.</param>
        /// <param name="HomeNotional">HomeNotional.</param>
        /// <param name="ForeignNotional">ForeignNotional.</param>
        /// <param name="TransactTime">TransactTime.</param>
        /// <param name="Timestamp">Timestamp.</param>
        public Execution(string ExecID = default(string), string OrderID = default(string), string ClOrdID = default(string), string ClOrdLinkID = default(string), decimal? Account = default(decimal?), string Symbol = default(string), string Side = default(string), decimal? LastQty = default(decimal?), double? LastPx = default(double?), double? UnderlyingLastPx = default(double?), string LastMkt = default(string), string LastLiquidityInd = default(string), double? SimpleOrderQty = default(double?), decimal? OrderQty = default(decimal?), double? Price = default(double?), decimal? DisplayQty = default(decimal?), double? StopPx = default(double?), double? PegOffsetValue = default(double?), string PegPriceType = default(string), string Currency = default(string), string SettlCurrency = default(string), string ExecType = default(string), string OrdType = default(string), string TimeInForce = default(string), string ExecInst = default(string), string ContingencyType = default(string), string ExDestination = default(string), string OrdStatus = default(string), string Triggered = default(string), bool? WorkingIndicator = default(bool?), string OrdRejReason = default(string), double? SimpleLeavesQty = default(double?), decimal? LeavesQty = default(decimal?), double? SimpleCumQty = default(double?), decimal? CumQty = default(decimal?), double? AvgPx = default(double?), double? Commission = default(double?), string TradePublishIndicator = default(string), string MultiLegReportingType = default(string), string Text = default(string), string TrdMatchID = default(string), decimal? ExecCost = default(decimal?), decimal? ExecComm = default(decimal?), double? HomeNotional = default(double?), double? ForeignNotional = default(double?), DateTime? TransactTime = default(DateTime?), DateTime? Timestamp = default(DateTime?))
        {
            // to ensure "ExecID" is required (not null)
            if (ExecID == null)
            {
                throw new InvalidDataException("ExecID is a required property for Execution and cannot be null");
            }
            else
            {
                this.ExecID = ExecID;
            }
            this.OrderID = OrderID;
            this.ClOrdID = ClOrdID;
            this.ClOrdLinkID = ClOrdLinkID;
            this.Account = Account;
            this.Symbol = Symbol;
            this.Side = Side;
            this.LastQty = LastQty;
            this.LastPx = LastPx;
            this.UnderlyingLastPx = UnderlyingLastPx;
            this.LastMkt = LastMkt;
            this.LastLiquidityInd = LastLiquidityInd;
            this.SimpleOrderQty = SimpleOrderQty;
            this.OrderQty = OrderQty;
            this.Price = Price;
            this.DisplayQty = DisplayQty;
            this.StopPx = StopPx;
            this.PegOffsetValue = PegOffsetValue;
            this.PegPriceType = PegPriceType;
            this.Currency = Currency;
            this.SettlCurrency = SettlCurrency;
            this.ExecType = ExecType;
            this.OrdType = OrdType;
            this.TimeInForce = TimeInForce;
            this.ExecInst = ExecInst;
            this.ContingencyType = ContingencyType;
            this.ExDestination = ExDestination;
            this.OrdStatus = OrdStatus;
            this.Triggered = Triggered;
            this.WorkingIndicator = WorkingIndicator;
            this.OrdRejReason = OrdRejReason;
            this.SimpleLeavesQty = SimpleLeavesQty;
            this.LeavesQty = LeavesQty;
            this.SimpleCumQty = SimpleCumQty;
            this.CumQty = CumQty;
            this.AvgPx = AvgPx;
            this.Commission = Commission;
            this.TradePublishIndicator = TradePublishIndicator;
            this.MultiLegReportingType = MultiLegReportingType;
            this.Text = Text;
            this.TrdMatchID = TrdMatchID;
            this.ExecCost = ExecCost;
            this.ExecComm = ExecComm;
            this.HomeNotional = HomeNotional;
            this.ForeignNotional = ForeignNotional;
            this.TransactTime = TransactTime;
            this.Timestamp = Timestamp;
        }
        
        /// <summary>
        /// Gets or Sets ExecID
        /// </summary>
        [DataMember(Name="execID", EmitDefaultValue=false)]
        public string ExecID { get; set; }

        /// <summary>
        /// Gets or Sets OrderID
        /// </summary>
        [DataMember(Name="orderID", EmitDefaultValue=false)]
        public string OrderID { get; set; }

        /// <summary>
        /// Gets or Sets ClOrdID
        /// </summary>
        [DataMember(Name="clOrdID", EmitDefaultValue=false)]
        public string ClOrdID { get; set; }

        /// <summary>
        /// Gets or Sets ClOrdLinkID
        /// </summary>
        [DataMember(Name="clOrdLinkID", EmitDefaultValue=false)]
        public string ClOrdLinkID { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public decimal? Account { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets LastQty
        /// </summary>
        [DataMember(Name="lastQty", EmitDefaultValue=false)]
        public decimal? LastQty { get; set; }

        /// <summary>
        /// Gets or Sets LastPx
        /// </summary>
        [DataMember(Name="lastPx", EmitDefaultValue=false)]
        public double? LastPx { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingLastPx
        /// </summary>
        [DataMember(Name="underlyingLastPx", EmitDefaultValue=false)]
        public double? UnderlyingLastPx { get; set; }

        /// <summary>
        /// Gets or Sets LastMkt
        /// </summary>
        [DataMember(Name="lastMkt", EmitDefaultValue=false)]
        public string LastMkt { get; set; }

        /// <summary>
        /// Gets or Sets LastLiquidityInd
        /// </summary>
        [DataMember(Name="lastLiquidityInd", EmitDefaultValue=false)]
        public string LastLiquidityInd { get; set; }

        /// <summary>
        /// Gets or Sets SimpleOrderQty
        /// </summary>
        [DataMember(Name="simpleOrderQty", EmitDefaultValue=false)]
        public double? SimpleOrderQty { get; set; }

        /// <summary>
        /// Gets or Sets OrderQty
        /// </summary>
        [DataMember(Name="orderQty", EmitDefaultValue=false)]
        public decimal? OrderQty { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets DisplayQty
        /// </summary>
        [DataMember(Name="displayQty", EmitDefaultValue=false)]
        public decimal? DisplayQty { get; set; }

        /// <summary>
        /// Gets or Sets StopPx
        /// </summary>
        [DataMember(Name="stopPx", EmitDefaultValue=false)]
        public double? StopPx { get; set; }

        /// <summary>
        /// Gets or Sets PegOffsetValue
        /// </summary>
        [DataMember(Name="pegOffsetValue", EmitDefaultValue=false)]
        public double? PegOffsetValue { get; set; }

        /// <summary>
        /// Gets or Sets PegPriceType
        /// </summary>
        [DataMember(Name="pegPriceType", EmitDefaultValue=false)]
        public string PegPriceType { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets SettlCurrency
        /// </summary>
        [DataMember(Name="settlCurrency", EmitDefaultValue=false)]
        public string SettlCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ExecType
        /// </summary>
        [DataMember(Name="execType", EmitDefaultValue=false)]
        public string ExecType { get; set; }

        /// <summary>
        /// Gets or Sets OrdType
        /// </summary>
        [DataMember(Name="ordType", EmitDefaultValue=false)]
        public string OrdType { get; set; }

        /// <summary>
        /// Gets or Sets TimeInForce
        /// </summary>
        [DataMember(Name="timeInForce", EmitDefaultValue=false)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// Gets or Sets ExecInst
        /// </summary>
        [DataMember(Name="execInst", EmitDefaultValue=false)]
        public string ExecInst { get; set; }

        /// <summary>
        /// Gets or Sets ContingencyType
        /// </summary>
        [DataMember(Name="contingencyType", EmitDefaultValue=false)]
        public string ContingencyType { get; set; }

        /// <summary>
        /// Gets or Sets ExDestination
        /// </summary>
        [DataMember(Name="exDestination", EmitDefaultValue=false)]
        public string ExDestination { get; set; }

        /// <summary>
        /// Gets or Sets OrdStatus
        /// </summary>
        [DataMember(Name="ordStatus", EmitDefaultValue=false)]
        public string OrdStatus { get; set; }

        /// <summary>
        /// Gets or Sets Triggered
        /// </summary>
        [DataMember(Name="triggered", EmitDefaultValue=false)]
        public string Triggered { get; set; }

        /// <summary>
        /// Gets or Sets WorkingIndicator
        /// </summary>
        [DataMember(Name="workingIndicator", EmitDefaultValue=false)]
        public bool? WorkingIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OrdRejReason
        /// </summary>
        [DataMember(Name="ordRejReason", EmitDefaultValue=false)]
        public string OrdRejReason { get; set; }

        /// <summary>
        /// Gets or Sets SimpleLeavesQty
        /// </summary>
        [DataMember(Name="simpleLeavesQty", EmitDefaultValue=false)]
        public double? SimpleLeavesQty { get; set; }

        /// <summary>
        /// Gets or Sets LeavesQty
        /// </summary>
        [DataMember(Name="leavesQty", EmitDefaultValue=false)]
        public decimal? LeavesQty { get; set; }

        /// <summary>
        /// Gets or Sets SimpleCumQty
        /// </summary>
        [DataMember(Name="simpleCumQty", EmitDefaultValue=false)]
        public double? SimpleCumQty { get; set; }

        /// <summary>
        /// Gets or Sets CumQty
        /// </summary>
        [DataMember(Name="cumQty", EmitDefaultValue=false)]
        public decimal? CumQty { get; set; }

        /// <summary>
        /// Gets or Sets AvgPx
        /// </summary>
        [DataMember(Name="avgPx", EmitDefaultValue=false)]
        public double? AvgPx { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public double? Commission { get; set; }

        /// <summary>
        /// Gets or Sets TradePublishIndicator
        /// </summary>
        [DataMember(Name="tradePublishIndicator", EmitDefaultValue=false)]
        public string TradePublishIndicator { get; set; }

        /// <summary>
        /// Gets or Sets MultiLegReportingType
        /// </summary>
        [DataMember(Name="multiLegReportingType", EmitDefaultValue=false)]
        public string MultiLegReportingType { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets TrdMatchID
        /// </summary>
        [DataMember(Name="trdMatchID", EmitDefaultValue=false)]
        public string TrdMatchID { get; set; }

        /// <summary>
        /// Gets or Sets ExecCost
        /// </summary>
        [DataMember(Name="execCost", EmitDefaultValue=false)]
        public decimal? ExecCost { get; set; }

        /// <summary>
        /// Gets or Sets ExecComm
        /// </summary>
        [DataMember(Name="execComm", EmitDefaultValue=false)]
        public decimal? ExecComm { get; set; }

        /// <summary>
        /// Gets or Sets HomeNotional
        /// </summary>
        [DataMember(Name="homeNotional", EmitDefaultValue=false)]
        public double? HomeNotional { get; set; }

        /// <summary>
        /// Gets or Sets ForeignNotional
        /// </summary>
        [DataMember(Name="foreignNotional", EmitDefaultValue=false)]
        public double? ForeignNotional { get; set; }

        /// <summary>
        /// Gets or Sets TransactTime
        /// </summary>
        [DataMember(Name="transactTime", EmitDefaultValue=false)]
        public DateTime? TransactTime { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Execution {\n");
            sb.Append("  ExecID: ").Append(ExecID).Append("\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  ClOrdID: ").Append(ClOrdID).Append("\n");
            sb.Append("  ClOrdLinkID: ").Append(ClOrdLinkID).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  LastQty: ").Append(LastQty).Append("\n");
            sb.Append("  LastPx: ").Append(LastPx).Append("\n");
            sb.Append("  UnderlyingLastPx: ").Append(UnderlyingLastPx).Append("\n");
            sb.Append("  LastMkt: ").Append(LastMkt).Append("\n");
            sb.Append("  LastLiquidityInd: ").Append(LastLiquidityInd).Append("\n");
            sb.Append("  SimpleOrderQty: ").Append(SimpleOrderQty).Append("\n");
            sb.Append("  OrderQty: ").Append(OrderQty).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  DisplayQty: ").Append(DisplayQty).Append("\n");
            sb.Append("  StopPx: ").Append(StopPx).Append("\n");
            sb.Append("  PegOffsetValue: ").Append(PegOffsetValue).Append("\n");
            sb.Append("  PegPriceType: ").Append(PegPriceType).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SettlCurrency: ").Append(SettlCurrency).Append("\n");
            sb.Append("  ExecType: ").Append(ExecType).Append("\n");
            sb.Append("  OrdType: ").Append(OrdType).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  ExecInst: ").Append(ExecInst).Append("\n");
            sb.Append("  ContingencyType: ").Append(ContingencyType).Append("\n");
            sb.Append("  ExDestination: ").Append(ExDestination).Append("\n");
            sb.Append("  OrdStatus: ").Append(OrdStatus).Append("\n");
            sb.Append("  Triggered: ").Append(Triggered).Append("\n");
            sb.Append("  WorkingIndicator: ").Append(WorkingIndicator).Append("\n");
            sb.Append("  OrdRejReason: ").Append(OrdRejReason).Append("\n");
            sb.Append("  SimpleLeavesQty: ").Append(SimpleLeavesQty).Append("\n");
            sb.Append("  LeavesQty: ").Append(LeavesQty).Append("\n");
            sb.Append("  SimpleCumQty: ").Append(SimpleCumQty).Append("\n");
            sb.Append("  CumQty: ").Append(CumQty).Append("\n");
            sb.Append("  AvgPx: ").Append(AvgPx).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  TradePublishIndicator: ").Append(TradePublishIndicator).Append("\n");
            sb.Append("  MultiLegReportingType: ").Append(MultiLegReportingType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TrdMatchID: ").Append(TrdMatchID).Append("\n");
            sb.Append("  ExecCost: ").Append(ExecCost).Append("\n");
            sb.Append("  ExecComm: ").Append(ExecComm).Append("\n");
            sb.Append("  HomeNotional: ").Append(HomeNotional).Append("\n");
            sb.Append("  ForeignNotional: ").Append(ForeignNotional).Append("\n");
            sb.Append("  TransactTime: ").Append(TransactTime).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Execution);
        }

        /// <summary>
        /// Returns true if Execution instances are equal
        /// </summary>
        /// <param name="input">Instance of Execution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Execution input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExecID == input.ExecID ||
                    (this.ExecID != null &&
                    this.ExecID.Equals(input.ExecID))
                ) && 
                (
                    this.OrderID == input.OrderID ||
                    (this.OrderID != null &&
                    this.OrderID.Equals(input.OrderID))
                ) && 
                (
                    this.ClOrdID == input.ClOrdID ||
                    (this.ClOrdID != null &&
                    this.ClOrdID.Equals(input.ClOrdID))
                ) && 
                (
                    this.ClOrdLinkID == input.ClOrdLinkID ||
                    (this.ClOrdLinkID != null &&
                    this.ClOrdLinkID.Equals(input.ClOrdLinkID))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.LastQty == input.LastQty ||
                    (this.LastQty != null &&
                    this.LastQty.Equals(input.LastQty))
                ) && 
                (
                    this.LastPx == input.LastPx ||
                    (this.LastPx != null &&
                    this.LastPx.Equals(input.LastPx))
                ) && 
                (
                    this.UnderlyingLastPx == input.UnderlyingLastPx ||
                    (this.UnderlyingLastPx != null &&
                    this.UnderlyingLastPx.Equals(input.UnderlyingLastPx))
                ) && 
                (
                    this.LastMkt == input.LastMkt ||
                    (this.LastMkt != null &&
                    this.LastMkt.Equals(input.LastMkt))
                ) && 
                (
                    this.LastLiquidityInd == input.LastLiquidityInd ||
                    (this.LastLiquidityInd != null &&
                    this.LastLiquidityInd.Equals(input.LastLiquidityInd))
                ) && 
                (
                    this.SimpleOrderQty == input.SimpleOrderQty ||
                    (this.SimpleOrderQty != null &&
                    this.SimpleOrderQty.Equals(input.SimpleOrderQty))
                ) && 
                (
                    this.OrderQty == input.OrderQty ||
                    (this.OrderQty != null &&
                    this.OrderQty.Equals(input.OrderQty))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.DisplayQty == input.DisplayQty ||
                    (this.DisplayQty != null &&
                    this.DisplayQty.Equals(input.DisplayQty))
                ) && 
                (
                    this.StopPx == input.StopPx ||
                    (this.StopPx != null &&
                    this.StopPx.Equals(input.StopPx))
                ) && 
                (
                    this.PegOffsetValue == input.PegOffsetValue ||
                    (this.PegOffsetValue != null &&
                    this.PegOffsetValue.Equals(input.PegOffsetValue))
                ) && 
                (
                    this.PegPriceType == input.PegPriceType ||
                    (this.PegPriceType != null &&
                    this.PegPriceType.Equals(input.PegPriceType))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.SettlCurrency == input.SettlCurrency ||
                    (this.SettlCurrency != null &&
                    this.SettlCurrency.Equals(input.SettlCurrency))
                ) && 
                (
                    this.ExecType == input.ExecType ||
                    (this.ExecType != null &&
                    this.ExecType.Equals(input.ExecType))
                ) && 
                (
                    this.OrdType == input.OrdType ||
                    (this.OrdType != null &&
                    this.OrdType.Equals(input.OrdType))
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    (this.TimeInForce != null &&
                    this.TimeInForce.Equals(input.TimeInForce))
                ) && 
                (
                    this.ExecInst == input.ExecInst ||
                    (this.ExecInst != null &&
                    this.ExecInst.Equals(input.ExecInst))
                ) && 
                (
                    this.ContingencyType == input.ContingencyType ||
                    (this.ContingencyType != null &&
                    this.ContingencyType.Equals(input.ContingencyType))
                ) && 
                (
                    this.ExDestination == input.ExDestination ||
                    (this.ExDestination != null &&
                    this.ExDestination.Equals(input.ExDestination))
                ) && 
                (
                    this.OrdStatus == input.OrdStatus ||
                    (this.OrdStatus != null &&
                    this.OrdStatus.Equals(input.OrdStatus))
                ) && 
                (
                    this.Triggered == input.Triggered ||
                    (this.Triggered != null &&
                    this.Triggered.Equals(input.Triggered))
                ) && 
                (
                    this.WorkingIndicator == input.WorkingIndicator ||
                    (this.WorkingIndicator != null &&
                    this.WorkingIndicator.Equals(input.WorkingIndicator))
                ) && 
                (
                    this.OrdRejReason == input.OrdRejReason ||
                    (this.OrdRejReason != null &&
                    this.OrdRejReason.Equals(input.OrdRejReason))
                ) && 
                (
                    this.SimpleLeavesQty == input.SimpleLeavesQty ||
                    (this.SimpleLeavesQty != null &&
                    this.SimpleLeavesQty.Equals(input.SimpleLeavesQty))
                ) && 
                (
                    this.LeavesQty == input.LeavesQty ||
                    (this.LeavesQty != null &&
                    this.LeavesQty.Equals(input.LeavesQty))
                ) && 
                (
                    this.SimpleCumQty == input.SimpleCumQty ||
                    (this.SimpleCumQty != null &&
                    this.SimpleCumQty.Equals(input.SimpleCumQty))
                ) && 
                (
                    this.CumQty == input.CumQty ||
                    (this.CumQty != null &&
                    this.CumQty.Equals(input.CumQty))
                ) && 
                (
                    this.AvgPx == input.AvgPx ||
                    (this.AvgPx != null &&
                    this.AvgPx.Equals(input.AvgPx))
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                ) && 
                (
                    this.TradePublishIndicator == input.TradePublishIndicator ||
                    (this.TradePublishIndicator != null &&
                    this.TradePublishIndicator.Equals(input.TradePublishIndicator))
                ) && 
                (
                    this.MultiLegReportingType == input.MultiLegReportingType ||
                    (this.MultiLegReportingType != null &&
                    this.MultiLegReportingType.Equals(input.MultiLegReportingType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.TrdMatchID == input.TrdMatchID ||
                    (this.TrdMatchID != null &&
                    this.TrdMatchID.Equals(input.TrdMatchID))
                ) && 
                (
                    this.ExecCost == input.ExecCost ||
                    (this.ExecCost != null &&
                    this.ExecCost.Equals(input.ExecCost))
                ) && 
                (
                    this.ExecComm == input.ExecComm ||
                    (this.ExecComm != null &&
                    this.ExecComm.Equals(input.ExecComm))
                ) && 
                (
                    this.HomeNotional == input.HomeNotional ||
                    (this.HomeNotional != null &&
                    this.HomeNotional.Equals(input.HomeNotional))
                ) && 
                (
                    this.ForeignNotional == input.ForeignNotional ||
                    (this.ForeignNotional != null &&
                    this.ForeignNotional.Equals(input.ForeignNotional))
                ) && 
                (
                    this.TransactTime == input.TransactTime ||
                    (this.TransactTime != null &&
                    this.TransactTime.Equals(input.TransactTime))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecID != null)
                    hashCode = hashCode * 59 + this.ExecID.GetHashCode();
                if (this.OrderID != null)
                    hashCode = hashCode * 59 + this.OrderID.GetHashCode();
                if (this.ClOrdID != null)
                    hashCode = hashCode * 59 + this.ClOrdID.GetHashCode();
                if (this.ClOrdLinkID != null)
                    hashCode = hashCode * 59 + this.ClOrdLinkID.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.LastQty != null)
                    hashCode = hashCode * 59 + this.LastQty.GetHashCode();
                if (this.LastPx != null)
                    hashCode = hashCode * 59 + this.LastPx.GetHashCode();
                if (this.UnderlyingLastPx != null)
                    hashCode = hashCode * 59 + this.UnderlyingLastPx.GetHashCode();
                if (this.LastMkt != null)
                    hashCode = hashCode * 59 + this.LastMkt.GetHashCode();
                if (this.LastLiquidityInd != null)
                    hashCode = hashCode * 59 + this.LastLiquidityInd.GetHashCode();
                if (this.SimpleOrderQty != null)
                    hashCode = hashCode * 59 + this.SimpleOrderQty.GetHashCode();
                if (this.OrderQty != null)
                    hashCode = hashCode * 59 + this.OrderQty.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.DisplayQty != null)
                    hashCode = hashCode * 59 + this.DisplayQty.GetHashCode();
                if (this.StopPx != null)
                    hashCode = hashCode * 59 + this.StopPx.GetHashCode();
                if (this.PegOffsetValue != null)
                    hashCode = hashCode * 59 + this.PegOffsetValue.GetHashCode();
                if (this.PegPriceType != null)
                    hashCode = hashCode * 59 + this.PegPriceType.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.SettlCurrency != null)
                    hashCode = hashCode * 59 + this.SettlCurrency.GetHashCode();
                if (this.ExecType != null)
                    hashCode = hashCode * 59 + this.ExecType.GetHashCode();
                if (this.OrdType != null)
                    hashCode = hashCode * 59 + this.OrdType.GetHashCode();
                if (this.TimeInForce != null)
                    hashCode = hashCode * 59 + this.TimeInForce.GetHashCode();
                if (this.ExecInst != null)
                    hashCode = hashCode * 59 + this.ExecInst.GetHashCode();
                if (this.ContingencyType != null)
                    hashCode = hashCode * 59 + this.ContingencyType.GetHashCode();
                if (this.ExDestination != null)
                    hashCode = hashCode * 59 + this.ExDestination.GetHashCode();
                if (this.OrdStatus != null)
                    hashCode = hashCode * 59 + this.OrdStatus.GetHashCode();
                if (this.Triggered != null)
                    hashCode = hashCode * 59 + this.Triggered.GetHashCode();
                if (this.WorkingIndicator != null)
                    hashCode = hashCode * 59 + this.WorkingIndicator.GetHashCode();
                if (this.OrdRejReason != null)
                    hashCode = hashCode * 59 + this.OrdRejReason.GetHashCode();
                if (this.SimpleLeavesQty != null)
                    hashCode = hashCode * 59 + this.SimpleLeavesQty.GetHashCode();
                if (this.LeavesQty != null)
                    hashCode = hashCode * 59 + this.LeavesQty.GetHashCode();
                if (this.SimpleCumQty != null)
                    hashCode = hashCode * 59 + this.SimpleCumQty.GetHashCode();
                if (this.CumQty != null)
                    hashCode = hashCode * 59 + this.CumQty.GetHashCode();
                if (this.AvgPx != null)
                    hashCode = hashCode * 59 + this.AvgPx.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                if (this.TradePublishIndicator != null)
                    hashCode = hashCode * 59 + this.TradePublishIndicator.GetHashCode();
                if (this.MultiLegReportingType != null)
                    hashCode = hashCode * 59 + this.MultiLegReportingType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.TrdMatchID != null)
                    hashCode = hashCode * 59 + this.TrdMatchID.GetHashCode();
                if (this.ExecCost != null)
                    hashCode = hashCode * 59 + this.ExecCost.GetHashCode();
                if (this.ExecComm != null)
                    hashCode = hashCode * 59 + this.ExecComm.GetHashCode();
                if (this.HomeNotional != null)
                    hashCode = hashCode * 59 + this.HomeNotional.GetHashCode();
                if (this.ForeignNotional != null)
                    hashCode = hashCode * 59 + this.ForeignNotional.GetHashCode();
                if (this.TransactTime != null)
                    hashCode = hashCode * 59 + this.TransactTime.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
