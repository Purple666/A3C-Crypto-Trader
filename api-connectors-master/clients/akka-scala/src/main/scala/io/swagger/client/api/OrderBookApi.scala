/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Error
import io.swagger.client.model.OrderBook
import io.swagger.client.model.OrderBookL2
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object OrderBookApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[OrderBook] (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
   * @param depth Orderbook depth.
   */
  def orderBook.get(symbol: String, depth: Option[Double]): ApiRequest[Seq[OrderBook]] =
    ApiRequest[Seq[OrderBook]](ApiMethods.GET, "https://localhost/api/v1", "/orderBook", "application/json")
      .withQueryParam("symbol", symbol)
      .withQueryParam("depth", depth)
      .withSuccessResponse[Seq[OrderBook]](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[OrderBookL2] (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
   * @param depth Orderbook depth per side. Send 0 for full depth.
   */
  def orderBook.getL2(symbol: String, depth: Option[Double]): ApiRequest[Seq[OrderBookL2]] =
    ApiRequest[Seq[OrderBookL2]](ApiMethods.GET, "https://localhost/api/v1", "/orderBook/L2", "application/json")
      .withQueryParam("symbol", symbol)
      .withQueryParam("depth", depth)
      .withSuccessResponse[Seq[OrderBookL2]](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
      

}

