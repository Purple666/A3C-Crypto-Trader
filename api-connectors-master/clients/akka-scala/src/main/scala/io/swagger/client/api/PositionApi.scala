/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Error
import io.swagger.client.model.Position
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object PositionApi {

  /**
   * See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
   * 
   * Expected answers:
   *   code 200 : Seq[Position] (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBTUSD\&quot;}.
   * @param columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
   * @param count Number of rows to fetch.
   */
  def position.get(filter: Option[String] = None, columns: Option[String] = None, count: Option[Double] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Seq[Position]] =
    ApiRequest[Seq[Position]](ApiMethods.GET, "https://localhost/api/v1", "/position", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withQueryParam("filter", filter)
      .withQueryParam("columns", columns)
      .withQueryParam("count", count)
      .withSuccessResponse[Seq[Position]](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
        /**
   * Users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
   * 
   * Expected answers:
   *   code 200 : Position (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param symbol Position symbol to isolate.
   * @param enabled True for isolated margin, false for cross margin.
   */
  def position.isolateMargin(symbol: String, enabled: Option[Boolean])(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Position] =
    ApiRequest[Position](ApiMethods.POST, "https://localhost/api/v1", "/position/isolate", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("symbol", symbol)
      .withFormParam("enabled", enabled)
      .withSuccessResponse[Position](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
        /**
   * When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
   * 
   * Expected answers:
   *   code 200 : Position (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param symbol Symbol of position to isolate.
   * @param amount Amount to transfer, in Satoshis. May be negative.
   */
  def position.transferIsolatedMargin(symbol: String, amount: Double)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Position] =
    ApiRequest[Position](ApiMethods.POST, "https://localhost/api/v1", "/position/transferMargin", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("symbol", symbol)
      .withFormParam("amount", amount)
      .withSuccessResponse[Position](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
        /**
   * Users can choose an isolated leverage. This will automatically enable isolated margin.
   * 
   * Expected answers:
   *   code 200 : Position (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param symbol Symbol of position to adjust.
   * @param leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
   */
  def position.updateLeverage(symbol: String, leverage: Double)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Position] =
    ApiRequest[Position](ApiMethods.POST, "https://localhost/api/v1", "/position/leverage", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("symbol", symbol)
      .withFormParam("leverage", leverage)
      .withSuccessResponse[Position](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
        /**
   * Risk Limits limit the size of positions you can trade at various margin levels. Larger positions require more margin. Please see the Risk Limit documentation for more details.
   * 
   * Expected answers:
   *   code 200 : Position (Request was successful)
   *   code 400 : Error (Parameter Error)
   *   code 401 : Error (Unauthorized)
   *   code 404 : Error (Not Found)
   * 
   * Available security schemes:
   *   apiKey (apiKey)
   *   apiNonce (apiKey)
   *   apiSignature (apiKey)
   * 
   * @param symbol Symbol of position to isolate.
   * @param riskLimit New Risk Limit, in Satoshis.
   */
  def position.updateRiskLimit(symbol: String, riskLimit: Double)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Position] =
    ApiRequest[Position](ApiMethods.POST, "https://localhost/api/v1", "/position/riskLimit", "application/json")
      .withApiKey(apiKey, "api-key", HEADER)
      .withApiKey(apiKey, "api-nonce", HEADER)
      .withApiKey(apiKey, "api-signature", HEADER)
      .withFormParam("symbol", symbol)
      .withFormParam("riskLimit", riskLimit)
      .withSuccessResponse[Position](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
      

}

