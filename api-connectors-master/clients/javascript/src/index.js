/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import APIKey from './model/APIKey';
import AccessToken from './model/AccessToken';
import Affiliate from './model/Affiliate';
import Announcement from './model/Announcement';
import Chat from './model/Chat';
import ChatChannel from './model/ChatChannel';
import ConnectedUsers from './model/ConnectedUsers';
import Error from './model/Error';
import ErrorError from './model/ErrorError';
import Execution from './model/Execution';
import Funding from './model/Funding';
import IndexComposite from './model/IndexComposite';
import InlineResponse200 from './model/InlineResponse200';
import Instrument from './model/Instrument';
import InstrumentInterval from './model/InstrumentInterval';
import Insurance from './model/Insurance';
import Leaderboard from './model/Leaderboard';
import Liquidation from './model/Liquidation';
import Margin from './model/Margin';
import Notification from './model/Notification';
import Order from './model/Order';
import OrderBook from './model/OrderBook';
import OrderBookL2 from './model/OrderBookL2';
import Position from './model/Position';
import Quote from './model/Quote';
import Settlement from './model/Settlement';
import Stats from './model/Stats';
import StatsHistory from './model/StatsHistory';
import StatsUSD from './model/StatsUSD';
import Trade from './model/Trade';
import TradeBin from './model/TradeBin';
import Transaction from './model/Transaction';
import User from './model/User';
import UserCommission from './model/UserCommission';
import UserPreferences from './model/UserPreferences';
import Wallet from './model/Wallet';
import XAny from './model/XAny';
import APIKeyApi from './api/APIKeyApi';
import AnnouncementApi from './api/AnnouncementApi';
import ChatApi from './api/ChatApi';
import ExecutionApi from './api/ExecutionApi';
import FundingApi from './api/FundingApi';
import InstrumentApi from './api/InstrumentApi';
import InsuranceApi from './api/InsuranceApi';
import LeaderboardApi from './api/LeaderboardApi';
import LiquidationApi from './api/LiquidationApi';
import NotificationApi from './api/NotificationApi';
import OrderApi from './api/OrderApi';
import OrderBookApi from './api/OrderBookApi';
import PositionApi from './api/PositionApi';
import QuoteApi from './api/QuoteApi';
import SchemaApi from './api/SchemaApi';
import SettlementApi from './api/SettlementApi';
import StatsApi from './api/StatsApi';
import TradeApi from './api/TradeApi';
import UserApi from './api/UserApi';


/**
* _REST_API_for_the_BitMEX_Trading_Platform_View_Changelog_appapiChangelog_Getting_Started_Fetching_DataAll_REST_endpoints_are_documented_below__You_can_try_out_any_query_right_from_this_interface_Most_table_queries_accept_count_start_and_reverse_params__Set_reversetrue_to_get_rows_newest_first_Additional_documentation_regarding_filters_timestamps_and_authenticationis_available_in__the_main_API_documentation_httpswww_bitmex_comapprestAPI_All_table_data_is_available_via_the__Websocket_appwsAPI__We_highly_recommend_using_the_socket_if_you_wantto_have_the_quickest_possible_data_without_being_subject_to_ratelimits__Return_TypesBy_default_all_data_is_returned_as_JSON__Send__formatcsv_to_get_CSV_data_or__formatxml_to_get_XML_data__Trade_Data_QueriesThis_is_only_a_small_subset_of_what_is_available_to_get_you_started_Fill_in_the_parameters_and_click_the_Try_it_out_button_to_try_any_of_these_queries___Pricing_Data_QuoteQuote_get__Trade_Data_TradeTrade_get__OrderBook_Data_OrderBookOrderBook_getL2__Settlement_Data_SettlementSettlement_get__Exchange_Statistics_StatsStats_historyEvery_function_of_the_BitMEX_com_platform_is_exposed_here_and_documented__Many_more_functions_are_available__Swagger_Specification__Download_Swagger_JSON_swagger_json_All_API_EndpointsClick_to_expand_a_section_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BitMexApi = require('index'); // See note below*.
* var xxxSvc = new BitMexApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BitMexApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BitMexApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BitMexApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The APIKey model constructor.
     * @property {module:model/APIKey}
     */
    APIKey,

    /**
     * The AccessToken model constructor.
     * @property {module:model/AccessToken}
     */
    AccessToken,

    /**
     * The Affiliate model constructor.
     * @property {module:model/Affiliate}
     */
    Affiliate,

    /**
     * The Announcement model constructor.
     * @property {module:model/Announcement}
     */
    Announcement,

    /**
     * The Chat model constructor.
     * @property {module:model/Chat}
     */
    Chat,

    /**
     * The ChatChannel model constructor.
     * @property {module:model/ChatChannel}
     */
    ChatChannel,

    /**
     * The ConnectedUsers model constructor.
     * @property {module:model/ConnectedUsers}
     */
    ConnectedUsers,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorError model constructor.
     * @property {module:model/ErrorError}
     */
    ErrorError,

    /**
     * The Execution model constructor.
     * @property {module:model/Execution}
     */
    Execution,

    /**
     * The Funding model constructor.
     * @property {module:model/Funding}
     */
    Funding,

    /**
     * The IndexComposite model constructor.
     * @property {module:model/IndexComposite}
     */
    IndexComposite,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The Instrument model constructor.
     * @property {module:model/Instrument}
     */
    Instrument,

    /**
     * The InstrumentInterval model constructor.
     * @property {module:model/InstrumentInterval}
     */
    InstrumentInterval,

    /**
     * The Insurance model constructor.
     * @property {module:model/Insurance}
     */
    Insurance,

    /**
     * The Leaderboard model constructor.
     * @property {module:model/Leaderboard}
     */
    Leaderboard,

    /**
     * The Liquidation model constructor.
     * @property {module:model/Liquidation}
     */
    Liquidation,

    /**
     * The Margin model constructor.
     * @property {module:model/Margin}
     */
    Margin,

    /**
     * The Notification model constructor.
     * @property {module:model/Notification}
     */
    Notification,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The OrderBook model constructor.
     * @property {module:model/OrderBook}
     */
    OrderBook,

    /**
     * The OrderBookL2 model constructor.
     * @property {module:model/OrderBookL2}
     */
    OrderBookL2,

    /**
     * The Position model constructor.
     * @property {module:model/Position}
     */
    Position,

    /**
     * The Quote model constructor.
     * @property {module:model/Quote}
     */
    Quote,

    /**
     * The Settlement model constructor.
     * @property {module:model/Settlement}
     */
    Settlement,

    /**
     * The Stats model constructor.
     * @property {module:model/Stats}
     */
    Stats,

    /**
     * The StatsHistory model constructor.
     * @property {module:model/StatsHistory}
     */
    StatsHistory,

    /**
     * The StatsUSD model constructor.
     * @property {module:model/StatsUSD}
     */
    StatsUSD,

    /**
     * The Trade model constructor.
     * @property {module:model/Trade}
     */
    Trade,

    /**
     * The TradeBin model constructor.
     * @property {module:model/TradeBin}
     */
    TradeBin,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The UserCommission model constructor.
     * @property {module:model/UserCommission}
     */
    UserCommission,

    /**
     * The UserPreferences model constructor.
     * @property {module:model/UserPreferences}
     */
    UserPreferences,

    /**
     * The Wallet model constructor.
     * @property {module:model/Wallet}
     */
    Wallet,

    /**
     * The XAny model constructor.
     * @property {module:model/XAny}
     */
    XAny,

    /**
    * The APIKeyApi service constructor.
    * @property {module:api/APIKeyApi}
    */
    APIKeyApi,

    /**
    * The AnnouncementApi service constructor.
    * @property {module:api/AnnouncementApi}
    */
    AnnouncementApi,

    /**
    * The ChatApi service constructor.
    * @property {module:api/ChatApi}
    */
    ChatApi,

    /**
    * The ExecutionApi service constructor.
    * @property {module:api/ExecutionApi}
    */
    ExecutionApi,

    /**
    * The FundingApi service constructor.
    * @property {module:api/FundingApi}
    */
    FundingApi,

    /**
    * The InstrumentApi service constructor.
    * @property {module:api/InstrumentApi}
    */
    InstrumentApi,

    /**
    * The InsuranceApi service constructor.
    * @property {module:api/InsuranceApi}
    */
    InsuranceApi,

    /**
    * The LeaderboardApi service constructor.
    * @property {module:api/LeaderboardApi}
    */
    LeaderboardApi,

    /**
    * The LiquidationApi service constructor.
    * @property {module:api/LiquidationApi}
    */
    LiquidationApi,

    /**
    * The NotificationApi service constructor.
    * @property {module:api/NotificationApi}
    */
    NotificationApi,

    /**
    * The OrderApi service constructor.
    * @property {module:api/OrderApi}
    */
    OrderApi,

    /**
    * The OrderBookApi service constructor.
    * @property {module:api/OrderBookApi}
    */
    OrderBookApi,

    /**
    * The PositionApi service constructor.
    * @property {module:api/PositionApi}
    */
    PositionApi,

    /**
    * The QuoteApi service constructor.
    * @property {module:api/QuoteApi}
    */
    QuoteApi,

    /**
    * The SchemaApi service constructor.
    * @property {module:api/SchemaApi}
    */
    SchemaApi,

    /**
    * The SettlementApi service constructor.
    * @property {module:api/SettlementApi}
    */
    SettlementApi,

    /**
    * The StatsApi service constructor.
    * @property {module:api/StatsApi}
    */
    StatsApi,

    /**
    * The TradeApi service constructor.
    * @property {module:api/TradeApi}
    */
    TradeApi,

    /**
    * The UserApi service constructor.
    * @property {module:api/UserApi}
    */
    UserApi
};
