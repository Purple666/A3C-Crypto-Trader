/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The Transaction model module.
* @module model/Transaction
* @version 1.2.0
*/
export default class Transaction {
    /**
    * Constructs a new <code>Transaction</code>.
    * @alias module:model/Transaction
    * @class
    * @param transactID {String} 
    */

    constructor(transactID) {
        

        
        

        this['transactID'] = transactID;

        
    }

    /**
    * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Transaction} obj Optional instance to populate.
    * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            
            
            

            if (data.hasOwnProperty('transactID')) {
                obj['transactID'] = ApiClient.convertToType(data['transactID'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('transactType')) {
                obj['transactType'] = ApiClient.convertToType(data['transactType'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('transactStatus')) {
                obj['transactStatus'] = ApiClient.convertToType(data['transactStatus'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('tx')) {
                obj['tx'] = ApiClient.convertToType(data['tx'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('transactTime')) {
                obj['transactTime'] = ApiClient.convertToType(data['transactTime'], 'Date');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
    * @member {String} transactID
    */
    transactID = undefined;
    /**
    * @member {Number} account
    */
    account = undefined;
    /**
    * @member {String} currency
    */
    currency = undefined;
    /**
    * @member {String} transactType
    */
    transactType = undefined;
    /**
    * @member {Number} amount
    */
    amount = undefined;
    /**
    * @member {Number} fee
    */
    fee = undefined;
    /**
    * @member {String} transactStatus
    */
    transactStatus = undefined;
    /**
    * @member {String} address
    */
    address = undefined;
    /**
    * @member {String} tx
    */
    tx = undefined;
    /**
    * @member {String} text
    */
    text = undefined;
    /**
    * @member {Date} transactTime
    */
    transactTime = undefined;
    /**
    * @member {Date} timestamp
    */
    timestamp = undefined;








}


