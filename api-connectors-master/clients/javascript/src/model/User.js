/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import UserPreferences from './UserPreferences';





/**
* The User model module.
* @module model/User
* @version 1.2.0
*/
export default class User {
    /**
    * Constructs a new <code>User</code>.
    * Account Operations
    * @alias module:model/User
    * @class
    * @param username {String} 
    * @param email {String} 
    */

    constructor(username, email) {
        

        
        

        this['username'] = username;this['email'] = email;

        
    }

    /**
    * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/User} obj Optional instance to populate.
    * @return {module:model/User} The populated <code>User</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            
            
            

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'Number');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('preferences')) {
                obj['preferences'] = UserPreferences.constructFromObject(data['preferences']);
            }
            if (data.hasOwnProperty('TFAEnabled')) {
                obj['TFAEnabled'] = ApiClient.convertToType(data['TFAEnabled'], 'String');
            }
            if (data.hasOwnProperty('affiliateID')) {
                obj['affiliateID'] = ApiClient.convertToType(data['affiliateID'], 'String');
            }
            if (data.hasOwnProperty('pgpPubKey')) {
                obj['pgpPubKey'] = ApiClient.convertToType(data['pgpPubKey'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {Number} id
    */
    id = undefined;
    /**
    * @member {Number} ownerId
    */
    ownerId = undefined;
    /**
    * @member {String} firstname
    */
    firstname = undefined;
    /**
    * @member {String} lastname
    */
    lastname = undefined;
    /**
    * @member {String} username
    */
    username = undefined;
    /**
    * @member {String} email
    */
    email = undefined;
    /**
    * @member {String} phone
    */
    phone = undefined;
    /**
    * @member {Date} created
    */
    created = undefined;
    /**
    * @member {Date} lastUpdated
    */
    lastUpdated = undefined;
    /**
    * @member {module:model/UserPreferences} preferences
    */
    preferences = undefined;
    /**
    * @member {String} TFAEnabled
    */
    TFAEnabled = undefined;
    /**
    * @member {String} affiliateID
    */
    affiliateID = undefined;
    /**
    * @member {String} pgpPubKey
    */
    pgpPubKey = undefined;
    /**
    * @member {String} country
    */
    country = undefined;








}


