/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The Margin model module.
* @module model/Margin
* @version 1.2.0
*/
export default class Margin {
    /**
    * Constructs a new <code>Margin</code>.
    * @alias module:model/Margin
    * @class
    * @param account {Number} 
    * @param currency {String} 
    */

    constructor(account, currency) {
        

        
        

        this['account'] = account;this['currency'] = currency;

        
    }

    /**
    * Constructs a <code>Margin</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Margin} obj Optional instance to populate.
    * @return {module:model/Margin} The populated <code>Margin</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Margin();

            
            
            

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('riskLimit')) {
                obj['riskLimit'] = ApiClient.convertToType(data['riskLimit'], 'Number');
            }
            if (data.hasOwnProperty('prevState')) {
                obj['prevState'] = ApiClient.convertToType(data['prevState'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('pendingCredit')) {
                obj['pendingCredit'] = ApiClient.convertToType(data['pendingCredit'], 'Number');
            }
            if (data.hasOwnProperty('pendingDebit')) {
                obj['pendingDebit'] = ApiClient.convertToType(data['pendingDebit'], 'Number');
            }
            if (data.hasOwnProperty('confirmedDebit')) {
                obj['confirmedDebit'] = ApiClient.convertToType(data['confirmedDebit'], 'Number');
            }
            if (data.hasOwnProperty('prevRealisedPnl')) {
                obj['prevRealisedPnl'] = ApiClient.convertToType(data['prevRealisedPnl'], 'Number');
            }
            if (data.hasOwnProperty('prevUnrealisedPnl')) {
                obj['prevUnrealisedPnl'] = ApiClient.convertToType(data['prevUnrealisedPnl'], 'Number');
            }
            if (data.hasOwnProperty('grossComm')) {
                obj['grossComm'] = ApiClient.convertToType(data['grossComm'], 'Number');
            }
            if (data.hasOwnProperty('grossOpenCost')) {
                obj['grossOpenCost'] = ApiClient.convertToType(data['grossOpenCost'], 'Number');
            }
            if (data.hasOwnProperty('grossOpenPremium')) {
                obj['grossOpenPremium'] = ApiClient.convertToType(data['grossOpenPremium'], 'Number');
            }
            if (data.hasOwnProperty('grossExecCost')) {
                obj['grossExecCost'] = ApiClient.convertToType(data['grossExecCost'], 'Number');
            }
            if (data.hasOwnProperty('grossMarkValue')) {
                obj['grossMarkValue'] = ApiClient.convertToType(data['grossMarkValue'], 'Number');
            }
            if (data.hasOwnProperty('riskValue')) {
                obj['riskValue'] = ApiClient.convertToType(data['riskValue'], 'Number');
            }
            if (data.hasOwnProperty('taxableMargin')) {
                obj['taxableMargin'] = ApiClient.convertToType(data['taxableMargin'], 'Number');
            }
            if (data.hasOwnProperty('initMargin')) {
                obj['initMargin'] = ApiClient.convertToType(data['initMargin'], 'Number');
            }
            if (data.hasOwnProperty('maintMargin')) {
                obj['maintMargin'] = ApiClient.convertToType(data['maintMargin'], 'Number');
            }
            if (data.hasOwnProperty('sessionMargin')) {
                obj['sessionMargin'] = ApiClient.convertToType(data['sessionMargin'], 'Number');
            }
            if (data.hasOwnProperty('targetExcessMargin')) {
                obj['targetExcessMargin'] = ApiClient.convertToType(data['targetExcessMargin'], 'Number');
            }
            if (data.hasOwnProperty('varMargin')) {
                obj['varMargin'] = ApiClient.convertToType(data['varMargin'], 'Number');
            }
            if (data.hasOwnProperty('realisedPnl')) {
                obj['realisedPnl'] = ApiClient.convertToType(data['realisedPnl'], 'Number');
            }
            if (data.hasOwnProperty('unrealisedPnl')) {
                obj['unrealisedPnl'] = ApiClient.convertToType(data['unrealisedPnl'], 'Number');
            }
            if (data.hasOwnProperty('indicativeTax')) {
                obj['indicativeTax'] = ApiClient.convertToType(data['indicativeTax'], 'Number');
            }
            if (data.hasOwnProperty('unrealisedProfit')) {
                obj['unrealisedProfit'] = ApiClient.convertToType(data['unrealisedProfit'], 'Number');
            }
            if (data.hasOwnProperty('syntheticMargin')) {
                obj['syntheticMargin'] = ApiClient.convertToType(data['syntheticMargin'], 'Number');
            }
            if (data.hasOwnProperty('walletBalance')) {
                obj['walletBalance'] = ApiClient.convertToType(data['walletBalance'], 'Number');
            }
            if (data.hasOwnProperty('marginBalance')) {
                obj['marginBalance'] = ApiClient.convertToType(data['marginBalance'], 'Number');
            }
            if (data.hasOwnProperty('marginBalancePcnt')) {
                obj['marginBalancePcnt'] = ApiClient.convertToType(data['marginBalancePcnt'], 'Number');
            }
            if (data.hasOwnProperty('marginLeverage')) {
                obj['marginLeverage'] = ApiClient.convertToType(data['marginLeverage'], 'Number');
            }
            if (data.hasOwnProperty('marginUsedPcnt')) {
                obj['marginUsedPcnt'] = ApiClient.convertToType(data['marginUsedPcnt'], 'Number');
            }
            if (data.hasOwnProperty('excessMargin')) {
                obj['excessMargin'] = ApiClient.convertToType(data['excessMargin'], 'Number');
            }
            if (data.hasOwnProperty('excessMarginPcnt')) {
                obj['excessMarginPcnt'] = ApiClient.convertToType(data['excessMarginPcnt'], 'Number');
            }
            if (data.hasOwnProperty('availableMargin')) {
                obj['availableMargin'] = ApiClient.convertToType(data['availableMargin'], 'Number');
            }
            if (data.hasOwnProperty('withdrawableMargin')) {
                obj['withdrawableMargin'] = ApiClient.convertToType(data['withdrawableMargin'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('grossLastValue')) {
                obj['grossLastValue'] = ApiClient.convertToType(data['grossLastValue'], 'Number');
            }
            if (data.hasOwnProperty('commission')) {
                obj['commission'] = ApiClient.convertToType(data['commission'], 'Number');
            }
        }
        return obj;
    }

    /**
    * @member {Number} account
    */
    account = undefined;
    /**
    * @member {String} currency
    */
    currency = undefined;
    /**
    * @member {Number} riskLimit
    */
    riskLimit = undefined;
    /**
    * @member {String} prevState
    */
    prevState = undefined;
    /**
    * @member {String} state
    */
    state = undefined;
    /**
    * @member {String} action
    */
    action = undefined;
    /**
    * @member {Number} amount
    */
    amount = undefined;
    /**
    * @member {Number} pendingCredit
    */
    pendingCredit = undefined;
    /**
    * @member {Number} pendingDebit
    */
    pendingDebit = undefined;
    /**
    * @member {Number} confirmedDebit
    */
    confirmedDebit = undefined;
    /**
    * @member {Number} prevRealisedPnl
    */
    prevRealisedPnl = undefined;
    /**
    * @member {Number} prevUnrealisedPnl
    */
    prevUnrealisedPnl = undefined;
    /**
    * @member {Number} grossComm
    */
    grossComm = undefined;
    /**
    * @member {Number} grossOpenCost
    */
    grossOpenCost = undefined;
    /**
    * @member {Number} grossOpenPremium
    */
    grossOpenPremium = undefined;
    /**
    * @member {Number} grossExecCost
    */
    grossExecCost = undefined;
    /**
    * @member {Number} grossMarkValue
    */
    grossMarkValue = undefined;
    /**
    * @member {Number} riskValue
    */
    riskValue = undefined;
    /**
    * @member {Number} taxableMargin
    */
    taxableMargin = undefined;
    /**
    * @member {Number} initMargin
    */
    initMargin = undefined;
    /**
    * @member {Number} maintMargin
    */
    maintMargin = undefined;
    /**
    * @member {Number} sessionMargin
    */
    sessionMargin = undefined;
    /**
    * @member {Number} targetExcessMargin
    */
    targetExcessMargin = undefined;
    /**
    * @member {Number} varMargin
    */
    varMargin = undefined;
    /**
    * @member {Number} realisedPnl
    */
    realisedPnl = undefined;
    /**
    * @member {Number} unrealisedPnl
    */
    unrealisedPnl = undefined;
    /**
    * @member {Number} indicativeTax
    */
    indicativeTax = undefined;
    /**
    * @member {Number} unrealisedProfit
    */
    unrealisedProfit = undefined;
    /**
    * @member {Number} syntheticMargin
    */
    syntheticMargin = undefined;
    /**
    * @member {Number} walletBalance
    */
    walletBalance = undefined;
    /**
    * @member {Number} marginBalance
    */
    marginBalance = undefined;
    /**
    * @member {Number} marginBalancePcnt
    * @default 0.0
    */
    marginBalancePcnt = 0.0;
    /**
    * @member {Number} marginLeverage
    * @default 0.0
    */
    marginLeverage = 0.0;
    /**
    * @member {Number} marginUsedPcnt
    * @default 0.0
    */
    marginUsedPcnt = 0.0;
    /**
    * @member {Number} excessMargin
    */
    excessMargin = undefined;
    /**
    * @member {Number} excessMarginPcnt
    * @default 0.0
    */
    excessMarginPcnt = 0.0;
    /**
    * @member {Number} availableMargin
    */
    availableMargin = undefined;
    /**
    * @member {Number} withdrawableMargin
    */
    withdrawableMargin = undefined;
    /**
    * @member {Date} timestamp
    */
    timestamp = undefined;
    /**
    * @member {Number} grossLastValue
    */
    grossLastValue = undefined;
    /**
    * @member {Number} commission
    * @default 0.0
    */
    commission = 0.0;








}


