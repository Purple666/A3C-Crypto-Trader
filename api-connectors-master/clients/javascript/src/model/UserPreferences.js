/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The UserPreferences model module.
* @module model/UserPreferences
* @version 1.2.0
*/
export default class UserPreferences {
    /**
    * Constructs a new <code>UserPreferences</code>.
    * @alias module:model/UserPreferences
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>UserPreferences</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/UserPreferences} obj Optional instance to populate.
    * @return {module:model/UserPreferences} The populated <code>UserPreferences</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserPreferences();

            
            
            

            if (data.hasOwnProperty('alertOnLiquidations')) {
                obj['alertOnLiquidations'] = ApiClient.convertToType(data['alertOnLiquidations'], 'Boolean');
            }
            if (data.hasOwnProperty('animationsEnabled')) {
                obj['animationsEnabled'] = ApiClient.convertToType(data['animationsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('announcementsLastSeen')) {
                obj['announcementsLastSeen'] = ApiClient.convertToType(data['announcementsLastSeen'], 'Date');
            }
            if (data.hasOwnProperty('chatChannelID')) {
                obj['chatChannelID'] = ApiClient.convertToType(data['chatChannelID'], 'Number');
            }
            if (data.hasOwnProperty('colorTheme')) {
                obj['colorTheme'] = ApiClient.convertToType(data['colorTheme'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('debug')) {
                obj['debug'] = ApiClient.convertToType(data['debug'], 'Boolean');
            }
            if (data.hasOwnProperty('disableEmails')) {
                obj['disableEmails'] = ApiClient.convertToType(data['disableEmails'], ['String']);
            }
            if (data.hasOwnProperty('hideConfirmDialogs')) {
                obj['hideConfirmDialogs'] = ApiClient.convertToType(data['hideConfirmDialogs'], ['String']);
            }
            if (data.hasOwnProperty('hideConnectionModal')) {
                obj['hideConnectionModal'] = ApiClient.convertToType(data['hideConnectionModal'], 'Boolean');
            }
            if (data.hasOwnProperty('hideFromLeaderboard')) {
                obj['hideFromLeaderboard'] = ApiClient.convertToType(data['hideFromLeaderboard'], 'Boolean');
            }
            if (data.hasOwnProperty('hideNameFromLeaderboard')) {
                obj['hideNameFromLeaderboard'] = ApiClient.convertToType(data['hideNameFromLeaderboard'], 'Boolean');
            }
            if (data.hasOwnProperty('hideNotifications')) {
                obj['hideNotifications'] = ApiClient.convertToType(data['hideNotifications'], ['String']);
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('msgsSeen')) {
                obj['msgsSeen'] = ApiClient.convertToType(data['msgsSeen'], ['String']);
            }
            if (data.hasOwnProperty('orderBookBinning')) {
                obj['orderBookBinning'] = ApiClient.convertToType(data['orderBookBinning'], Object);
            }
            if (data.hasOwnProperty('orderBookType')) {
                obj['orderBookType'] = ApiClient.convertToType(data['orderBookType'], 'String');
            }
            if (data.hasOwnProperty('orderClearImmediate')) {
                obj['orderClearImmediate'] = ApiClient.convertToType(data['orderClearImmediate'], 'Boolean');
            }
            if (data.hasOwnProperty('orderControlsPlusMinus')) {
                obj['orderControlsPlusMinus'] = ApiClient.convertToType(data['orderControlsPlusMinus'], 'Boolean');
            }
            if (data.hasOwnProperty('sounds')) {
                obj['sounds'] = ApiClient.convertToType(data['sounds'], ['String']);
            }
            if (data.hasOwnProperty('strictIPCheck')) {
                obj['strictIPCheck'] = ApiClient.convertToType(data['strictIPCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('strictTimeout')) {
                obj['strictTimeout'] = ApiClient.convertToType(data['strictTimeout'], 'Boolean');
            }
            if (data.hasOwnProperty('tickerGroup')) {
                obj['tickerGroup'] = ApiClient.convertToType(data['tickerGroup'], 'String');
            }
            if (data.hasOwnProperty('tickerPinned')) {
                obj['tickerPinned'] = ApiClient.convertToType(data['tickerPinned'], 'Boolean');
            }
            if (data.hasOwnProperty('tradeLayout')) {
                obj['tradeLayout'] = ApiClient.convertToType(data['tradeLayout'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {Boolean} alertOnLiquidations
    */
    alertOnLiquidations = undefined;
    /**
    * @member {Boolean} animationsEnabled
    */
    animationsEnabled = undefined;
    /**
    * @member {Date} announcementsLastSeen
    */
    announcementsLastSeen = undefined;
    /**
    * @member {Number} chatChannelID
    */
    chatChannelID = undefined;
    /**
    * @member {String} colorTheme
    */
    colorTheme = undefined;
    /**
    * @member {String} currency
    */
    currency = undefined;
    /**
    * @member {Boolean} debug
    */
    debug = undefined;
    /**
    * @member {Array.<String>} disableEmails
    */
    disableEmails = undefined;
    /**
    * @member {Array.<String>} hideConfirmDialogs
    */
    hideConfirmDialogs = undefined;
    /**
    * @member {Boolean} hideConnectionModal
    */
    hideConnectionModal = undefined;
    /**
    * @member {Boolean} hideFromLeaderboard
    * @default false
    */
    hideFromLeaderboard = false;
    /**
    * @member {Boolean} hideNameFromLeaderboard
    * @default true
    */
    hideNameFromLeaderboard = true;
    /**
    * @member {Array.<String>} hideNotifications
    */
    hideNotifications = undefined;
    /**
    * @member {String} locale
    * @default 'en-US'
    */
    locale = 'en-US';
    /**
    * @member {Array.<String>} msgsSeen
    */
    msgsSeen = undefined;
    /**
    * @member {Object} orderBookBinning
    */
    orderBookBinning = undefined;
    /**
    * @member {String} orderBookType
    */
    orderBookType = undefined;
    /**
    * @member {Boolean} orderClearImmediate
    * @default false
    */
    orderClearImmediate = false;
    /**
    * @member {Boolean} orderControlsPlusMinus
    */
    orderControlsPlusMinus = undefined;
    /**
    * @member {Array.<String>} sounds
    */
    sounds = undefined;
    /**
    * @member {Boolean} strictIPCheck
    * @default false
    */
    strictIPCheck = false;
    /**
    * @member {Boolean} strictTimeout
    * @default true
    */
    strictTimeout = true;
    /**
    * @member {String} tickerGroup
    */
    tickerGroup = undefined;
    /**
    * @member {Boolean} tickerPinned
    */
    tickerPinned = undefined;
    /**
    * @member {String} tradeLayout
    */
    tradeLayout = undefined;








}


