/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The Notification model module.
* @module model/Notification
* @version 1.2.0
*/
export default class Notification {
    /**
    * Constructs a new <code>Notification</code>.
    * Account Notifications
    * @alias module:model/Notification
    * @class
    * @param _date {Date} 
    * @param title {String} 
    * @param body {String} 
    * @param ttl {Number} 
    */

    constructor(_date, title, body, ttl) {
        

        
        

        this['date'] = _date;this['title'] = title;this['body'] = body;this['ttl'] = ttl;

        
    }

    /**
    * Constructs a <code>Notification</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Notification} obj Optional instance to populate.
    * @return {module:model/Notification} The populated <code>Notification</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Notification();

            
            
            

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('closable')) {
                obj['closable'] = ApiClient.convertToType(data['closable'], 'Boolean');
            }
            if (data.hasOwnProperty('persist')) {
                obj['persist'] = ApiClient.convertToType(data['persist'], 'Boolean');
            }
            if (data.hasOwnProperty('waitForVisibility')) {
                obj['waitForVisibility'] = ApiClient.convertToType(data['waitForVisibility'], 'Boolean');
            }
            if (data.hasOwnProperty('sound')) {
                obj['sound'] = ApiClient.convertToType(data['sound'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {Number} id
    */
    id = undefined;
    /**
    * @member {Date} date
    */
    date = undefined;
    /**
    * @member {String} title
    */
    title = undefined;
    /**
    * @member {String} body
    */
    body = undefined;
    /**
    * @member {Number} ttl
    */
    ttl = undefined;
    /**
    * @member {module:model/Notification.TypeEnum} type
    */
    type = undefined;
    /**
    * @member {Boolean} closable
    * @default true
    */
    closable = true;
    /**
    * @member {Boolean} persist
    * @default true
    */
    persist = true;
    /**
    * @member {Boolean} waitForVisibility
    * @default true
    */
    waitForVisibility = true;
    /**
    * @member {String} sound
    */
    sound = undefined;






    /**
    * Allowed values for the <code>type</code> property.
    * @enum {String}
    * @readonly
    */
    static TypeEnum = {
    
        /**
         * value: "success"
         * @const
         */
        "success": "success",
    
        /**
         * value: "error"
         * @const
         */
        "error": "error",
    
        /**
         * value: "info"
         * @const
         */
        "info": "info"    
    };



}


