/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The Wallet model module.
* @module model/Wallet
* @version 1.2.0
*/
export default class Wallet {
    /**
    * Constructs a new <code>Wallet</code>.
    * @alias module:model/Wallet
    * @class
    * @param account {Number} 
    * @param currency {String} 
    */

    constructor(account, currency) {
        

        
        

        this['account'] = account;this['currency'] = currency;

        
    }

    /**
    * Constructs a <code>Wallet</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Wallet} obj Optional instance to populate.
    * @return {module:model/Wallet} The populated <code>Wallet</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Wallet();

            
            
            

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('prevDeposited')) {
                obj['prevDeposited'] = ApiClient.convertToType(data['prevDeposited'], 'Number');
            }
            if (data.hasOwnProperty('prevWithdrawn')) {
                obj['prevWithdrawn'] = ApiClient.convertToType(data['prevWithdrawn'], 'Number');
            }
            if (data.hasOwnProperty('prevTransferIn')) {
                obj['prevTransferIn'] = ApiClient.convertToType(data['prevTransferIn'], 'Number');
            }
            if (data.hasOwnProperty('prevTransferOut')) {
                obj['prevTransferOut'] = ApiClient.convertToType(data['prevTransferOut'], 'Number');
            }
            if (data.hasOwnProperty('prevAmount')) {
                obj['prevAmount'] = ApiClient.convertToType(data['prevAmount'], 'Number');
            }
            if (data.hasOwnProperty('prevTimestamp')) {
                obj['prevTimestamp'] = ApiClient.convertToType(data['prevTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('deltaDeposited')) {
                obj['deltaDeposited'] = ApiClient.convertToType(data['deltaDeposited'], 'Number');
            }
            if (data.hasOwnProperty('deltaWithdrawn')) {
                obj['deltaWithdrawn'] = ApiClient.convertToType(data['deltaWithdrawn'], 'Number');
            }
            if (data.hasOwnProperty('deltaTransferIn')) {
                obj['deltaTransferIn'] = ApiClient.convertToType(data['deltaTransferIn'], 'Number');
            }
            if (data.hasOwnProperty('deltaTransferOut')) {
                obj['deltaTransferOut'] = ApiClient.convertToType(data['deltaTransferOut'], 'Number');
            }
            if (data.hasOwnProperty('deltaAmount')) {
                obj['deltaAmount'] = ApiClient.convertToType(data['deltaAmount'], 'Number');
            }
            if (data.hasOwnProperty('deposited')) {
                obj['deposited'] = ApiClient.convertToType(data['deposited'], 'Number');
            }
            if (data.hasOwnProperty('withdrawn')) {
                obj['withdrawn'] = ApiClient.convertToType(data['withdrawn'], 'Number');
            }
            if (data.hasOwnProperty('transferIn')) {
                obj['transferIn'] = ApiClient.convertToType(data['transferIn'], 'Number');
            }
            if (data.hasOwnProperty('transferOut')) {
                obj['transferOut'] = ApiClient.convertToType(data['transferOut'], 'Number');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('pendingCredit')) {
                obj['pendingCredit'] = ApiClient.convertToType(data['pendingCredit'], 'Number');
            }
            if (data.hasOwnProperty('pendingDebit')) {
                obj['pendingDebit'] = ApiClient.convertToType(data['pendingDebit'], 'Number');
            }
            if (data.hasOwnProperty('confirmedDebit')) {
                obj['confirmedDebit'] = ApiClient.convertToType(data['confirmedDebit'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('addr')) {
                obj['addr'] = ApiClient.convertToType(data['addr'], 'String');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
            if (data.hasOwnProperty('withdrawalLock')) {
                obj['withdrawalLock'] = ApiClient.convertToType(data['withdrawalLock'], ['String']);
            }
        }
        return obj;
    }

    /**
    * @member {Number} account
    */
    account = undefined;
    /**
    * @member {String} currency
    */
    currency = undefined;
    /**
    * @member {Number} prevDeposited
    */
    prevDeposited = undefined;
    /**
    * @member {Number} prevWithdrawn
    */
    prevWithdrawn = undefined;
    /**
    * @member {Number} prevTransferIn
    */
    prevTransferIn = undefined;
    /**
    * @member {Number} prevTransferOut
    */
    prevTransferOut = undefined;
    /**
    * @member {Number} prevAmount
    */
    prevAmount = undefined;
    /**
    * @member {Date} prevTimestamp
    */
    prevTimestamp = undefined;
    /**
    * @member {Number} deltaDeposited
    */
    deltaDeposited = undefined;
    /**
    * @member {Number} deltaWithdrawn
    */
    deltaWithdrawn = undefined;
    /**
    * @member {Number} deltaTransferIn
    */
    deltaTransferIn = undefined;
    /**
    * @member {Number} deltaTransferOut
    */
    deltaTransferOut = undefined;
    /**
    * @member {Number} deltaAmount
    */
    deltaAmount = undefined;
    /**
    * @member {Number} deposited
    */
    deposited = undefined;
    /**
    * @member {Number} withdrawn
    */
    withdrawn = undefined;
    /**
    * @member {Number} transferIn
    */
    transferIn = undefined;
    /**
    * @member {Number} transferOut
    */
    transferOut = undefined;
    /**
    * @member {Number} amount
    */
    amount = undefined;
    /**
    * @member {Number} pendingCredit
    */
    pendingCredit = undefined;
    /**
    * @member {Number} pendingDebit
    */
    pendingDebit = undefined;
    /**
    * @member {Number} confirmedDebit
    */
    confirmedDebit = undefined;
    /**
    * @member {Date} timestamp
    */
    timestamp = undefined;
    /**
    * @member {String} addr
    */
    addr = undefined;
    /**
    * @member {String} script
    */
    script = undefined;
    /**
    * @member {Array.<String>} withdrawalLock
    */
    withdrawalLock = undefined;








}


