/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)    ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.UserPreferences();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserPreferences', function() {
    it('should create an instance of UserPreferences', function() {
      // uncomment below and update the code to test UserPreferences
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be.a(BitMexApi.UserPreferences);
    });

    it('should have the property alertOnLiquidations (base name: "alertOnLiquidations")', function() {
      // uncomment below and update the code to test the property alertOnLiquidations
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property animationsEnabled (base name: "animationsEnabled")', function() {
      // uncomment below and update the code to test the property animationsEnabled
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property announcementsLastSeen (base name: "announcementsLastSeen")', function() {
      // uncomment below and update the code to test the property announcementsLastSeen
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property chatChannelID (base name: "chatChannelID")', function() {
      // uncomment below and update the code to test the property chatChannelID
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property colorTheme (base name: "colorTheme")', function() {
      // uncomment below and update the code to test the property colorTheme
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property debug (base name: "debug")', function() {
      // uncomment below and update the code to test the property debug
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property disableEmails (base name: "disableEmails")', function() {
      // uncomment below and update the code to test the property disableEmails
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property hideConfirmDialogs (base name: "hideConfirmDialogs")', function() {
      // uncomment below and update the code to test the property hideConfirmDialogs
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property hideConnectionModal (base name: "hideConnectionModal")', function() {
      // uncomment below and update the code to test the property hideConnectionModal
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property hideFromLeaderboard (base name: "hideFromLeaderboard")', function() {
      // uncomment below and update the code to test the property hideFromLeaderboard
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property hideNameFromLeaderboard (base name: "hideNameFromLeaderboard")', function() {
      // uncomment below and update the code to test the property hideNameFromLeaderboard
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property hideNotifications (base name: "hideNotifications")', function() {
      // uncomment below and update the code to test the property hideNotifications
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property locale (base name: "locale")', function() {
      // uncomment below and update the code to test the property locale
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property msgsSeen (base name: "msgsSeen")', function() {
      // uncomment below and update the code to test the property msgsSeen
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property orderBookBinning (base name: "orderBookBinning")', function() {
      // uncomment below and update the code to test the property orderBookBinning
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property orderBookType (base name: "orderBookType")', function() {
      // uncomment below and update the code to test the property orderBookType
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property orderClearImmediate (base name: "orderClearImmediate")', function() {
      // uncomment below and update the code to test the property orderClearImmediate
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property orderControlsPlusMinus (base name: "orderControlsPlusMinus")', function() {
      // uncomment below and update the code to test the property orderControlsPlusMinus
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property sounds (base name: "sounds")', function() {
      // uncomment below and update the code to test the property sounds
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property strictIPCheck (base name: "strictIPCheck")', function() {
      // uncomment below and update the code to test the property strictIPCheck
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property strictTimeout (base name: "strictTimeout")', function() {
      // uncomment below and update the code to test the property strictTimeout
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property tickerGroup (base name: "tickerGroup")', function() {
      // uncomment below and update the code to test the property tickerGroup
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property tickerPinned (base name: "tickerPinned")', function() {
      // uncomment below and update the code to test the property tickerPinned
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

    it('should have the property tradeLayout (base name: "tradeLayout")', function() {
      // uncomment below and update the code to test the property tradeLayout
      //var instane = new BitMexApi.UserPreferences();
      //expect(instance).to.be();
    });

  });

}));
