//
// Margin.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Margin: Codable {

    public var account: Double
    public var currency: String
    public var riskLimit: Double?
    public var prevState: String?
    public var state: String?
    public var action: String?
    public var amount: Double?
    public var pendingCredit: Double?
    public var pendingDebit: Double?
    public var confirmedDebit: Double?
    public var prevRealisedPnl: Double?
    public var prevUnrealisedPnl: Double?
    public var grossComm: Double?
    public var grossOpenCost: Double?
    public var grossOpenPremium: Double?
    public var grossExecCost: Double?
    public var grossMarkValue: Double?
    public var riskValue: Double?
    public var taxableMargin: Double?
    public var initMargin: Double?
    public var maintMargin: Double?
    public var sessionMargin: Double?
    public var targetExcessMargin: Double?
    public var varMargin: Double?
    public var realisedPnl: Double?
    public var unrealisedPnl: Double?
    public var indicativeTax: Double?
    public var unrealisedProfit: Double?
    public var syntheticMargin: Double?
    public var walletBalance: Double?
    public var marginBalance: Double?
    public var marginBalancePcnt: Double?
    public var marginLeverage: Double?
    public var marginUsedPcnt: Double?
    public var excessMargin: Double?
    public var excessMarginPcnt: Double?
    public var availableMargin: Double?
    public var withdrawableMargin: Double?
    public var timestamp: Date?
    public var grossLastValue: Double?
    public var commission: Double?


    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(account, forKey: "account")
        try container.encode(currency, forKey: "currency")
        try container.encodeIfPresent(riskLimit, forKey: "riskLimit")
        try container.encodeIfPresent(prevState, forKey: "prevState")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(action, forKey: "action")
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(pendingCredit, forKey: "pendingCredit")
        try container.encodeIfPresent(pendingDebit, forKey: "pendingDebit")
        try container.encodeIfPresent(confirmedDebit, forKey: "confirmedDebit")
        try container.encodeIfPresent(prevRealisedPnl, forKey: "prevRealisedPnl")
        try container.encodeIfPresent(prevUnrealisedPnl, forKey: "prevUnrealisedPnl")
        try container.encodeIfPresent(grossComm, forKey: "grossComm")
        try container.encodeIfPresent(grossOpenCost, forKey: "grossOpenCost")
        try container.encodeIfPresent(grossOpenPremium, forKey: "grossOpenPremium")
        try container.encodeIfPresent(grossExecCost, forKey: "grossExecCost")
        try container.encodeIfPresent(grossMarkValue, forKey: "grossMarkValue")
        try container.encodeIfPresent(riskValue, forKey: "riskValue")
        try container.encodeIfPresent(taxableMargin, forKey: "taxableMargin")
        try container.encodeIfPresent(initMargin, forKey: "initMargin")
        try container.encodeIfPresent(maintMargin, forKey: "maintMargin")
        try container.encodeIfPresent(sessionMargin, forKey: "sessionMargin")
        try container.encodeIfPresent(targetExcessMargin, forKey: "targetExcessMargin")
        try container.encodeIfPresent(varMargin, forKey: "varMargin")
        try container.encodeIfPresent(realisedPnl, forKey: "realisedPnl")
        try container.encodeIfPresent(unrealisedPnl, forKey: "unrealisedPnl")
        try container.encodeIfPresent(indicativeTax, forKey: "indicativeTax")
        try container.encodeIfPresent(unrealisedProfit, forKey: "unrealisedProfit")
        try container.encodeIfPresent(syntheticMargin, forKey: "syntheticMargin")
        try container.encodeIfPresent(walletBalance, forKey: "walletBalance")
        try container.encodeIfPresent(marginBalance, forKey: "marginBalance")
        try container.encodeIfPresent(marginBalancePcnt, forKey: "marginBalancePcnt")
        try container.encodeIfPresent(marginLeverage, forKey: "marginLeverage")
        try container.encodeIfPresent(marginUsedPcnt, forKey: "marginUsedPcnt")
        try container.encodeIfPresent(excessMargin, forKey: "excessMargin")
        try container.encodeIfPresent(excessMarginPcnt, forKey: "excessMarginPcnt")
        try container.encodeIfPresent(availableMargin, forKey: "availableMargin")
        try container.encodeIfPresent(withdrawableMargin, forKey: "withdrawableMargin")
        try container.encodeIfPresent(timestamp, forKey: "timestamp")
        try container.encodeIfPresent(grossLastValue, forKey: "grossLastValue")
        try container.encodeIfPresent(commission, forKey: "commission")
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        account = try container.decode(Double.self, forKey: "account")
        currency = try container.decode(String.self, forKey: "currency")
        riskLimit = try container.decodeIfPresent(Double.self, forKey: "riskLimit")
        prevState = try container.decodeIfPresent(String.self, forKey: "prevState")
        state = try container.decodeIfPresent(String.self, forKey: "state")
        action = try container.decodeIfPresent(String.self, forKey: "action")
        amount = try container.decodeIfPresent(Double.self, forKey: "amount")
        pendingCredit = try container.decodeIfPresent(Double.self, forKey: "pendingCredit")
        pendingDebit = try container.decodeIfPresent(Double.self, forKey: "pendingDebit")
        confirmedDebit = try container.decodeIfPresent(Double.self, forKey: "confirmedDebit")
        prevRealisedPnl = try container.decodeIfPresent(Double.self, forKey: "prevRealisedPnl")
        prevUnrealisedPnl = try container.decodeIfPresent(Double.self, forKey: "prevUnrealisedPnl")
        grossComm = try container.decodeIfPresent(Double.self, forKey: "grossComm")
        grossOpenCost = try container.decodeIfPresent(Double.self, forKey: "grossOpenCost")
        grossOpenPremium = try container.decodeIfPresent(Double.self, forKey: "grossOpenPremium")
        grossExecCost = try container.decodeIfPresent(Double.self, forKey: "grossExecCost")
        grossMarkValue = try container.decodeIfPresent(Double.self, forKey: "grossMarkValue")
        riskValue = try container.decodeIfPresent(Double.self, forKey: "riskValue")
        taxableMargin = try container.decodeIfPresent(Double.self, forKey: "taxableMargin")
        initMargin = try container.decodeIfPresent(Double.self, forKey: "initMargin")
        maintMargin = try container.decodeIfPresent(Double.self, forKey: "maintMargin")
        sessionMargin = try container.decodeIfPresent(Double.self, forKey: "sessionMargin")
        targetExcessMargin = try container.decodeIfPresent(Double.self, forKey: "targetExcessMargin")
        varMargin = try container.decodeIfPresent(Double.self, forKey: "varMargin")
        realisedPnl = try container.decodeIfPresent(Double.self, forKey: "realisedPnl")
        unrealisedPnl = try container.decodeIfPresent(Double.self, forKey: "unrealisedPnl")
        indicativeTax = try container.decodeIfPresent(Double.self, forKey: "indicativeTax")
        unrealisedProfit = try container.decodeIfPresent(Double.self, forKey: "unrealisedProfit")
        syntheticMargin = try container.decodeIfPresent(Double.self, forKey: "syntheticMargin")
        walletBalance = try container.decodeIfPresent(Double.self, forKey: "walletBalance")
        marginBalance = try container.decodeIfPresent(Double.self, forKey: "marginBalance")
        marginBalancePcnt = try container.decodeIfPresent(Double.self, forKey: "marginBalancePcnt")
        marginLeverage = try container.decodeIfPresent(Double.self, forKey: "marginLeverage")
        marginUsedPcnt = try container.decodeIfPresent(Double.self, forKey: "marginUsedPcnt")
        excessMargin = try container.decodeIfPresent(Double.self, forKey: "excessMargin")
        excessMarginPcnt = try container.decodeIfPresent(Double.self, forKey: "excessMarginPcnt")
        availableMargin = try container.decodeIfPresent(Double.self, forKey: "availableMargin")
        withdrawableMargin = try container.decodeIfPresent(Double.self, forKey: "withdrawableMargin")
        timestamp = try container.decodeIfPresent(Date.self, forKey: "timestamp")
        grossLastValue = try container.decodeIfPresent(Double.self, forKey: "grossLastValue")
        commission = try container.decodeIfPresent(Double.self, forKey: "commission")
    }
}

