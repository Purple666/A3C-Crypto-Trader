//
// Instrument.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Tradeable Contracts, Indices, and History */

open class Instrument: Codable {

    public var symbol: String
    public var rootSymbol: String?
    public var state: String?
    public var typ: String?
    public var listing: Date?
    public var front: Date?
    public var expiry: Date?
    public var settle: Date?
    public var relistInterval: Date?
    public var inverseLeg: String?
    public var sellLeg: String?
    public var buyLeg: String?
    public var positionCurrency: String?
    public var underlying: String?
    public var quoteCurrency: String?
    public var underlyingSymbol: String?
    public var reference: String?
    public var referenceSymbol: String?
    public var calcInterval: Date?
    public var publishInterval: Date?
    public var publishTime: Date?
    public var maxOrderQty: Double?
    public var maxPrice: Double?
    public var lotSize: Double?
    public var tickSize: Double?
    public var multiplier: Double?
    public var settlCurrency: String?
    public var underlyingToPositionMultiplier: Double?
    public var underlyingToSettleMultiplier: Double?
    public var quoteToSettleMultiplier: Double?
    public var isQuanto: Bool?
    public var isInverse: Bool?
    public var initMargin: Double?
    public var maintMargin: Double?
    public var riskLimit: Double?
    public var riskStep: Double?
    public var limit: Double?
    public var capped: Bool?
    public var taxed: Bool?
    public var deleverage: Bool?
    public var makerFee: Double?
    public var takerFee: Double?
    public var settlementFee: Double?
    public var insuranceFee: Double?
    public var fundingBaseSymbol: String?
    public var fundingQuoteSymbol: String?
    public var fundingPremiumSymbol: String?
    public var fundingTimestamp: Date?
    public var fundingInterval: Date?
    public var fundingRate: Double?
    public var indicativeFundingRate: Double?
    public var rebalanceTimestamp: Date?
    public var rebalanceInterval: Date?
    public var openingTimestamp: Date?
    public var closingTimestamp: Date?
    public var sessionInterval: Date?
    public var prevClosePrice: Double?
    public var limitDownPrice: Double?
    public var limitUpPrice: Double?
    public var bankruptLimitDownPrice: Double?
    public var bankruptLimitUpPrice: Double?
    public var prevTotalVolume: Double?
    public var totalVolume: Double?
    public var volume: Double?
    public var volume24h: Double?
    public var prevTotalTurnover: Double?
    public var totalTurnover: Double?
    public var turnover: Double?
    public var turnover24h: Double?
    public var prevPrice24h: Double?
    public var vwap: Double?
    public var highPrice: Double?
    public var lowPrice: Double?
    public var lastPrice: Double?
    public var lastPriceProtected: Double?
    public var lastTickDirection: String?
    public var lastChangePcnt: Double?
    public var bidPrice: Double?
    public var midPrice: Double?
    public var askPrice: Double?
    public var impactBidPrice: Double?
    public var impactMidPrice: Double?
    public var impactAskPrice: Double?
    public var hasLiquidity: Bool?
    public var openInterest: Double?
    public var openValue: Double?
    public var fairMethod: String?
    public var fairBasisRate: Double?
    public var fairBasis: Double?
    public var fairPrice: Double?
    public var markMethod: String?
    public var markPrice: Double?
    public var indicativeTaxRate: Double?
    public var indicativeSettlePrice: Double?
    public var settledPrice: Double?
    public var timestamp: Date?


    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(symbol, forKey: "symbol")
        try container.encodeIfPresent(rootSymbol, forKey: "rootSymbol")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(typ, forKey: "typ")
        try container.encodeIfPresent(listing, forKey: "listing")
        try container.encodeIfPresent(front, forKey: "front")
        try container.encodeIfPresent(expiry, forKey: "expiry")
        try container.encodeIfPresent(settle, forKey: "settle")
        try container.encodeIfPresent(relistInterval, forKey: "relistInterval")
        try container.encodeIfPresent(inverseLeg, forKey: "inverseLeg")
        try container.encodeIfPresent(sellLeg, forKey: "sellLeg")
        try container.encodeIfPresent(buyLeg, forKey: "buyLeg")
        try container.encodeIfPresent(positionCurrency, forKey: "positionCurrency")
        try container.encodeIfPresent(underlying, forKey: "underlying")
        try container.encodeIfPresent(quoteCurrency, forKey: "quoteCurrency")
        try container.encodeIfPresent(underlyingSymbol, forKey: "underlyingSymbol")
        try container.encodeIfPresent(reference, forKey: "reference")
        try container.encodeIfPresent(referenceSymbol, forKey: "referenceSymbol")
        try container.encodeIfPresent(calcInterval, forKey: "calcInterval")
        try container.encodeIfPresent(publishInterval, forKey: "publishInterval")
        try container.encodeIfPresent(publishTime, forKey: "publishTime")
        try container.encodeIfPresent(maxOrderQty, forKey: "maxOrderQty")
        try container.encodeIfPresent(maxPrice, forKey: "maxPrice")
        try container.encodeIfPresent(lotSize, forKey: "lotSize")
        try container.encodeIfPresent(tickSize, forKey: "tickSize")
        try container.encodeIfPresent(multiplier, forKey: "multiplier")
        try container.encodeIfPresent(settlCurrency, forKey: "settlCurrency")
        try container.encodeIfPresent(underlyingToPositionMultiplier, forKey: "underlyingToPositionMultiplier")
        try container.encodeIfPresent(underlyingToSettleMultiplier, forKey: "underlyingToSettleMultiplier")
        try container.encodeIfPresent(quoteToSettleMultiplier, forKey: "quoteToSettleMultiplier")
        try container.encodeIfPresent(isQuanto, forKey: "isQuanto")
        try container.encodeIfPresent(isInverse, forKey: "isInverse")
        try container.encodeIfPresent(initMargin, forKey: "initMargin")
        try container.encodeIfPresent(maintMargin, forKey: "maintMargin")
        try container.encodeIfPresent(riskLimit, forKey: "riskLimit")
        try container.encodeIfPresent(riskStep, forKey: "riskStep")
        try container.encodeIfPresent(limit, forKey: "limit")
        try container.encodeIfPresent(capped, forKey: "capped")
        try container.encodeIfPresent(taxed, forKey: "taxed")
        try container.encodeIfPresent(deleverage, forKey: "deleverage")
        try container.encodeIfPresent(makerFee, forKey: "makerFee")
        try container.encodeIfPresent(takerFee, forKey: "takerFee")
        try container.encodeIfPresent(settlementFee, forKey: "settlementFee")
        try container.encodeIfPresent(insuranceFee, forKey: "insuranceFee")
        try container.encodeIfPresent(fundingBaseSymbol, forKey: "fundingBaseSymbol")
        try container.encodeIfPresent(fundingQuoteSymbol, forKey: "fundingQuoteSymbol")
        try container.encodeIfPresent(fundingPremiumSymbol, forKey: "fundingPremiumSymbol")
        try container.encodeIfPresent(fundingTimestamp, forKey: "fundingTimestamp")
        try container.encodeIfPresent(fundingInterval, forKey: "fundingInterval")
        try container.encodeIfPresent(fundingRate, forKey: "fundingRate")
        try container.encodeIfPresent(indicativeFundingRate, forKey: "indicativeFundingRate")
        try container.encodeIfPresent(rebalanceTimestamp, forKey: "rebalanceTimestamp")
        try container.encodeIfPresent(rebalanceInterval, forKey: "rebalanceInterval")
        try container.encodeIfPresent(openingTimestamp, forKey: "openingTimestamp")
        try container.encodeIfPresent(closingTimestamp, forKey: "closingTimestamp")
        try container.encodeIfPresent(sessionInterval, forKey: "sessionInterval")
        try container.encodeIfPresent(prevClosePrice, forKey: "prevClosePrice")
        try container.encodeIfPresent(limitDownPrice, forKey: "limitDownPrice")
        try container.encodeIfPresent(limitUpPrice, forKey: "limitUpPrice")
        try container.encodeIfPresent(bankruptLimitDownPrice, forKey: "bankruptLimitDownPrice")
        try container.encodeIfPresent(bankruptLimitUpPrice, forKey: "bankruptLimitUpPrice")
        try container.encodeIfPresent(prevTotalVolume, forKey: "prevTotalVolume")
        try container.encodeIfPresent(totalVolume, forKey: "totalVolume")
        try container.encodeIfPresent(volume, forKey: "volume")
        try container.encodeIfPresent(volume24h, forKey: "volume24h")
        try container.encodeIfPresent(prevTotalTurnover, forKey: "prevTotalTurnover")
        try container.encodeIfPresent(totalTurnover, forKey: "totalTurnover")
        try container.encodeIfPresent(turnover, forKey: "turnover")
        try container.encodeIfPresent(turnover24h, forKey: "turnover24h")
        try container.encodeIfPresent(prevPrice24h, forKey: "prevPrice24h")
        try container.encodeIfPresent(vwap, forKey: "vwap")
        try container.encodeIfPresent(highPrice, forKey: "highPrice")
        try container.encodeIfPresent(lowPrice, forKey: "lowPrice")
        try container.encodeIfPresent(lastPrice, forKey: "lastPrice")
        try container.encodeIfPresent(lastPriceProtected, forKey: "lastPriceProtected")
        try container.encodeIfPresent(lastTickDirection, forKey: "lastTickDirection")
        try container.encodeIfPresent(lastChangePcnt, forKey: "lastChangePcnt")
        try container.encodeIfPresent(bidPrice, forKey: "bidPrice")
        try container.encodeIfPresent(midPrice, forKey: "midPrice")
        try container.encodeIfPresent(askPrice, forKey: "askPrice")
        try container.encodeIfPresent(impactBidPrice, forKey: "impactBidPrice")
        try container.encodeIfPresent(impactMidPrice, forKey: "impactMidPrice")
        try container.encodeIfPresent(impactAskPrice, forKey: "impactAskPrice")
        try container.encodeIfPresent(hasLiquidity, forKey: "hasLiquidity")
        try container.encodeIfPresent(openInterest, forKey: "openInterest")
        try container.encodeIfPresent(openValue, forKey: "openValue")
        try container.encodeIfPresent(fairMethod, forKey: "fairMethod")
        try container.encodeIfPresent(fairBasisRate, forKey: "fairBasisRate")
        try container.encodeIfPresent(fairBasis, forKey: "fairBasis")
        try container.encodeIfPresent(fairPrice, forKey: "fairPrice")
        try container.encodeIfPresent(markMethod, forKey: "markMethod")
        try container.encodeIfPresent(markPrice, forKey: "markPrice")
        try container.encodeIfPresent(indicativeTaxRate, forKey: "indicativeTaxRate")
        try container.encodeIfPresent(indicativeSettlePrice, forKey: "indicativeSettlePrice")
        try container.encodeIfPresent(settledPrice, forKey: "settledPrice")
        try container.encodeIfPresent(timestamp, forKey: "timestamp")
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        symbol = try container.decode(String.self, forKey: "symbol")
        rootSymbol = try container.decodeIfPresent(String.self, forKey: "rootSymbol")
        state = try container.decodeIfPresent(String.self, forKey: "state")
        typ = try container.decodeIfPresent(String.self, forKey: "typ")
        listing = try container.decodeIfPresent(Date.self, forKey: "listing")
        front = try container.decodeIfPresent(Date.self, forKey: "front")
        expiry = try container.decodeIfPresent(Date.self, forKey: "expiry")
        settle = try container.decodeIfPresent(Date.self, forKey: "settle")
        relistInterval = try container.decodeIfPresent(Date.self, forKey: "relistInterval")
        inverseLeg = try container.decodeIfPresent(String.self, forKey: "inverseLeg")
        sellLeg = try container.decodeIfPresent(String.self, forKey: "sellLeg")
        buyLeg = try container.decodeIfPresent(String.self, forKey: "buyLeg")
        positionCurrency = try container.decodeIfPresent(String.self, forKey: "positionCurrency")
        underlying = try container.decodeIfPresent(String.self, forKey: "underlying")
        quoteCurrency = try container.decodeIfPresent(String.self, forKey: "quoteCurrency")
        underlyingSymbol = try container.decodeIfPresent(String.self, forKey: "underlyingSymbol")
        reference = try container.decodeIfPresent(String.self, forKey: "reference")
        referenceSymbol = try container.decodeIfPresent(String.self, forKey: "referenceSymbol")
        calcInterval = try container.decodeIfPresent(Date.self, forKey: "calcInterval")
        publishInterval = try container.decodeIfPresent(Date.self, forKey: "publishInterval")
        publishTime = try container.decodeIfPresent(Date.self, forKey: "publishTime")
        maxOrderQty = try container.decodeIfPresent(Double.self, forKey: "maxOrderQty")
        maxPrice = try container.decodeIfPresent(Double.self, forKey: "maxPrice")
        lotSize = try container.decodeIfPresent(Double.self, forKey: "lotSize")
        tickSize = try container.decodeIfPresent(Double.self, forKey: "tickSize")
        multiplier = try container.decodeIfPresent(Double.self, forKey: "multiplier")
        settlCurrency = try container.decodeIfPresent(String.self, forKey: "settlCurrency")
        underlyingToPositionMultiplier = try container.decodeIfPresent(Double.self, forKey: "underlyingToPositionMultiplier")
        underlyingToSettleMultiplier = try container.decodeIfPresent(Double.self, forKey: "underlyingToSettleMultiplier")
        quoteToSettleMultiplier = try container.decodeIfPresent(Double.self, forKey: "quoteToSettleMultiplier")
        isQuanto = try container.decodeIfPresent(Bool.self, forKey: "isQuanto")
        isInverse = try container.decodeIfPresent(Bool.self, forKey: "isInverse")
        initMargin = try container.decodeIfPresent(Double.self, forKey: "initMargin")
        maintMargin = try container.decodeIfPresent(Double.self, forKey: "maintMargin")
        riskLimit = try container.decodeIfPresent(Double.self, forKey: "riskLimit")
        riskStep = try container.decodeIfPresent(Double.self, forKey: "riskStep")
        limit = try container.decodeIfPresent(Double.self, forKey: "limit")
        capped = try container.decodeIfPresent(Bool.self, forKey: "capped")
        taxed = try container.decodeIfPresent(Bool.self, forKey: "taxed")
        deleverage = try container.decodeIfPresent(Bool.self, forKey: "deleverage")
        makerFee = try container.decodeIfPresent(Double.self, forKey: "makerFee")
        takerFee = try container.decodeIfPresent(Double.self, forKey: "takerFee")
        settlementFee = try container.decodeIfPresent(Double.self, forKey: "settlementFee")
        insuranceFee = try container.decodeIfPresent(Double.self, forKey: "insuranceFee")
        fundingBaseSymbol = try container.decodeIfPresent(String.self, forKey: "fundingBaseSymbol")
        fundingQuoteSymbol = try container.decodeIfPresent(String.self, forKey: "fundingQuoteSymbol")
        fundingPremiumSymbol = try container.decodeIfPresent(String.self, forKey: "fundingPremiumSymbol")
        fundingTimestamp = try container.decodeIfPresent(Date.self, forKey: "fundingTimestamp")
        fundingInterval = try container.decodeIfPresent(Date.self, forKey: "fundingInterval")
        fundingRate = try container.decodeIfPresent(Double.self, forKey: "fundingRate")
        indicativeFundingRate = try container.decodeIfPresent(Double.self, forKey: "indicativeFundingRate")
        rebalanceTimestamp = try container.decodeIfPresent(Date.self, forKey: "rebalanceTimestamp")
        rebalanceInterval = try container.decodeIfPresent(Date.self, forKey: "rebalanceInterval")
        openingTimestamp = try container.decodeIfPresent(Date.self, forKey: "openingTimestamp")
        closingTimestamp = try container.decodeIfPresent(Date.self, forKey: "closingTimestamp")
        sessionInterval = try container.decodeIfPresent(Date.self, forKey: "sessionInterval")
        prevClosePrice = try container.decodeIfPresent(Double.self, forKey: "prevClosePrice")
        limitDownPrice = try container.decodeIfPresent(Double.self, forKey: "limitDownPrice")
        limitUpPrice = try container.decodeIfPresent(Double.self, forKey: "limitUpPrice")
        bankruptLimitDownPrice = try container.decodeIfPresent(Double.self, forKey: "bankruptLimitDownPrice")
        bankruptLimitUpPrice = try container.decodeIfPresent(Double.self, forKey: "bankruptLimitUpPrice")
        prevTotalVolume = try container.decodeIfPresent(Double.self, forKey: "prevTotalVolume")
        totalVolume = try container.decodeIfPresent(Double.self, forKey: "totalVolume")
        volume = try container.decodeIfPresent(Double.self, forKey: "volume")
        volume24h = try container.decodeIfPresent(Double.self, forKey: "volume24h")
        prevTotalTurnover = try container.decodeIfPresent(Double.self, forKey: "prevTotalTurnover")
        totalTurnover = try container.decodeIfPresent(Double.self, forKey: "totalTurnover")
        turnover = try container.decodeIfPresent(Double.self, forKey: "turnover")
        turnover24h = try container.decodeIfPresent(Double.self, forKey: "turnover24h")
        prevPrice24h = try container.decodeIfPresent(Double.self, forKey: "prevPrice24h")
        vwap = try container.decodeIfPresent(Double.self, forKey: "vwap")
        highPrice = try container.decodeIfPresent(Double.self, forKey: "highPrice")
        lowPrice = try container.decodeIfPresent(Double.self, forKey: "lowPrice")
        lastPrice = try container.decodeIfPresent(Double.self, forKey: "lastPrice")
        lastPriceProtected = try container.decodeIfPresent(Double.self, forKey: "lastPriceProtected")
        lastTickDirection = try container.decodeIfPresent(String.self, forKey: "lastTickDirection")
        lastChangePcnt = try container.decodeIfPresent(Double.self, forKey: "lastChangePcnt")
        bidPrice = try container.decodeIfPresent(Double.self, forKey: "bidPrice")
        midPrice = try container.decodeIfPresent(Double.self, forKey: "midPrice")
        askPrice = try container.decodeIfPresent(Double.self, forKey: "askPrice")
        impactBidPrice = try container.decodeIfPresent(Double.self, forKey: "impactBidPrice")
        impactMidPrice = try container.decodeIfPresent(Double.self, forKey: "impactMidPrice")
        impactAskPrice = try container.decodeIfPresent(Double.self, forKey: "impactAskPrice")
        hasLiquidity = try container.decodeIfPresent(Bool.self, forKey: "hasLiquidity")
        openInterest = try container.decodeIfPresent(Double.self, forKey: "openInterest")
        openValue = try container.decodeIfPresent(Double.self, forKey: "openValue")
        fairMethod = try container.decodeIfPresent(String.self, forKey: "fairMethod")
        fairBasisRate = try container.decodeIfPresent(Double.self, forKey: "fairBasisRate")
        fairBasis = try container.decodeIfPresent(Double.self, forKey: "fairBasis")
        fairPrice = try container.decodeIfPresent(Double.self, forKey: "fairPrice")
        markMethod = try container.decodeIfPresent(String.self, forKey: "markMethod")
        markPrice = try container.decodeIfPresent(Double.self, forKey: "markPrice")
        indicativeTaxRate = try container.decodeIfPresent(Double.self, forKey: "indicativeTaxRate")
        indicativeSettlePrice = try container.decodeIfPresent(Double.self, forKey: "indicativeSettlePrice")
        settledPrice = try container.decodeIfPresent(Double.self, forKey: "settledPrice")
        timestamp = try container.decodeIfPresent(Date.self, forKey: "timestamp")
    }
}

