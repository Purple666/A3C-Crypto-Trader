//
// User.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Account Operations */

open class User: Codable {

    public var id: Double?
    public var ownerId: Double?
    public var firstname: String?
    public var lastname: String?
    public var username: String
    public var email: String
    public var phone: String?
    public var created: Date?
    public var lastUpdated: Date?
    public var preferences: UserPreferences?
    public var tFAEnabled: String?
    public var affiliateID: String?
    public var pgpPubKey: String?
    public var country: String?


    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(ownerId, forKey: "ownerId")
        try container.encodeIfPresent(firstname, forKey: "firstname")
        try container.encodeIfPresent(lastname, forKey: "lastname")
        try container.encode(username, forKey: "username")
        try container.encode(email, forKey: "email")
        try container.encodeIfPresent(phone, forKey: "phone")
        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(lastUpdated, forKey: "lastUpdated")
        try container.encodeIfPresent(preferences, forKey: "preferences")
        try container.encodeIfPresent(tFAEnabled, forKey: "TFAEnabled")
        try container.encodeIfPresent(affiliateID, forKey: "affiliateID")
        try container.encodeIfPresent(pgpPubKey, forKey: "pgpPubKey")
        try container.encodeIfPresent(country, forKey: "country")
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Double.self, forKey: "id")
        ownerId = try container.decodeIfPresent(Double.self, forKey: "ownerId")
        firstname = try container.decodeIfPresent(String.self, forKey: "firstname")
        lastname = try container.decodeIfPresent(String.self, forKey: "lastname")
        username = try container.decode(String.self, forKey: "username")
        email = try container.decode(String.self, forKey: "email")
        phone = try container.decodeIfPresent(String.self, forKey: "phone")
        created = try container.decodeIfPresent(Date.self, forKey: "created")
        lastUpdated = try container.decodeIfPresent(Date.self, forKey: "lastUpdated")
        preferences = try container.decodeIfPresent(UserPreferences.self, forKey: "preferences")
        tFAEnabled = try container.decodeIfPresent(String.self, forKey: "TFAEnabled")
        affiliateID = try container.decodeIfPresent(String.self, forKey: "affiliateID")
        pgpPubKey = try container.decodeIfPresent(String.self, forKey: "pgpPubKey")
        country = try container.decodeIfPresent(String.self, forKey: "country")
    }
}

