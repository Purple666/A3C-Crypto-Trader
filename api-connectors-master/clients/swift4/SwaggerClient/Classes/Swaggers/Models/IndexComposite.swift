//
// IndexComposite.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class IndexComposite: Codable {

    public var timestamp: Date
    public var symbol: String?
    public var indexSymbol: String?
    public var reference: String?
    public var lastPrice: Double?
    public var weight: Double?
    public var logged: Date?


    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(timestamp, forKey: "timestamp")
        try container.encodeIfPresent(symbol, forKey: "symbol")
        try container.encodeIfPresent(indexSymbol, forKey: "indexSymbol")
        try container.encodeIfPresent(reference, forKey: "reference")
        try container.encodeIfPresent(lastPrice, forKey: "lastPrice")
        try container.encodeIfPresent(weight, forKey: "weight")
        try container.encodeIfPresent(logged, forKey: "logged")
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        timestamp = try container.decode(Date.self, forKey: "timestamp")
        symbol = try container.decodeIfPresent(String.self, forKey: "symbol")
        indexSymbol = try container.decodeIfPresent(String.self, forKey: "indexSymbol")
        reference = try container.decodeIfPresent(String.self, forKey: "reference")
        lastPrice = try container.decodeIfPresent(Double.self, forKey: "lastPrice")
        weight = try container.decodeIfPresent(Double.self, forKey: "weight")
        logged = try container.decodeIfPresent(Date.self, forKey: "logged")
    }
}

