//
// TradeBin.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class TradeBin: Codable {

    public var timestamp: Date
    public var symbol: String
    public var open: Double?
    public var high: Double?
    public var low: Double?
    public var close: Double?
    public var trades: Double?
    public var volume: Double?
    public var vwap: Double?
    public var lastSize: Double?
    public var turnover: Double?
    public var homeNotional: Double?
    public var foreignNotional: Double?


    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(timestamp, forKey: "timestamp")
        try container.encode(symbol, forKey: "symbol")
        try container.encodeIfPresent(open, forKey: "open")
        try container.encodeIfPresent(high, forKey: "high")
        try container.encodeIfPresent(low, forKey: "low")
        try container.encodeIfPresent(close, forKey: "close")
        try container.encodeIfPresent(trades, forKey: "trades")
        try container.encodeIfPresent(volume, forKey: "volume")
        try container.encodeIfPresent(vwap, forKey: "vwap")
        try container.encodeIfPresent(lastSize, forKey: "lastSize")
        try container.encodeIfPresent(turnover, forKey: "turnover")
        try container.encodeIfPresent(homeNotional, forKey: "homeNotional")
        try container.encodeIfPresent(foreignNotional, forKey: "foreignNotional")
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        timestamp = try container.decode(Date.self, forKey: "timestamp")
        symbol = try container.decode(String.self, forKey: "symbol")
        open = try container.decodeIfPresent(Double.self, forKey: "open")
        high = try container.decodeIfPresent(Double.self, forKey: "high")
        low = try container.decodeIfPresent(Double.self, forKey: "low")
        close = try container.decodeIfPresent(Double.self, forKey: "close")
        trades = try container.decodeIfPresent(Double.self, forKey: "trades")
        volume = try container.decodeIfPresent(Double.self, forKey: "volume")
        vwap = try container.decodeIfPresent(Double.self, forKey: "vwap")
        lastSize = try container.decodeIfPresent(Double.self, forKey: "lastSize")
        turnover = try container.decodeIfPresent(Double.self, forKey: "turnover")
        homeNotional = try container.decodeIfPresent(Double.self, forKey: "homeNotional")
        foreignNotional = try container.decodeIfPresent(Double.self, forKey: "foreignNotional")
    }
}

