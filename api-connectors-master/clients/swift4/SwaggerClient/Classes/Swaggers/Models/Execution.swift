//
// Execution.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Raw Order and Balance Data */

open class Execution: Codable {

    public var execID: String
    public var orderID: String?
    public var clOrdID: String?
    public var clOrdLinkID: String?
    public var account: Double?
    public var symbol: String?
    public var side: String?
    public var lastQty: Double?
    public var lastPx: Double?
    public var underlyingLastPx: Double?
    public var lastMkt: String?
    public var lastLiquidityInd: String?
    public var simpleOrderQty: Double?
    public var orderQty: Double?
    public var price: Double?
    public var displayQty: Double?
    public var stopPx: Double?
    public var pegOffsetValue: Double?
    public var pegPriceType: String?
    public var currency: String?
    public var settlCurrency: String?
    public var execType: String?
    public var ordType: String?
    public var timeInForce: String?
    public var execInst: String?
    public var contingencyType: String?
    public var exDestination: String?
    public var ordStatus: String?
    public var triggered: String?
    public var workingIndicator: Bool?
    public var ordRejReason: String?
    public var simpleLeavesQty: Double?
    public var leavesQty: Double?
    public var simpleCumQty: Double?
    public var cumQty: Double?
    public var avgPx: Double?
    public var commission: Double?
    public var tradePublishIndicator: String?
    public var multiLegReportingType: String?
    public var text: String?
    public var trdMatchID: String?
    public var execCost: Double?
    public var execComm: Double?
    public var homeNotional: Double?
    public var foreignNotional: Double?
    public var transactTime: Date?
    public var timestamp: Date?


    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(execID, forKey: "execID")
        try container.encodeIfPresent(orderID, forKey: "orderID")
        try container.encodeIfPresent(clOrdID, forKey: "clOrdID")
        try container.encodeIfPresent(clOrdLinkID, forKey: "clOrdLinkID")
        try container.encodeIfPresent(account, forKey: "account")
        try container.encodeIfPresent(symbol, forKey: "symbol")
        try container.encodeIfPresent(side, forKey: "side")
        try container.encodeIfPresent(lastQty, forKey: "lastQty")
        try container.encodeIfPresent(lastPx, forKey: "lastPx")
        try container.encodeIfPresent(underlyingLastPx, forKey: "underlyingLastPx")
        try container.encodeIfPresent(lastMkt, forKey: "lastMkt")
        try container.encodeIfPresent(lastLiquidityInd, forKey: "lastLiquidityInd")
        try container.encodeIfPresent(simpleOrderQty, forKey: "simpleOrderQty")
        try container.encodeIfPresent(orderQty, forKey: "orderQty")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(displayQty, forKey: "displayQty")
        try container.encodeIfPresent(stopPx, forKey: "stopPx")
        try container.encodeIfPresent(pegOffsetValue, forKey: "pegOffsetValue")
        try container.encodeIfPresent(pegPriceType, forKey: "pegPriceType")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(settlCurrency, forKey: "settlCurrency")
        try container.encodeIfPresent(execType, forKey: "execType")
        try container.encodeIfPresent(ordType, forKey: "ordType")
        try container.encodeIfPresent(timeInForce, forKey: "timeInForce")
        try container.encodeIfPresent(execInst, forKey: "execInst")
        try container.encodeIfPresent(contingencyType, forKey: "contingencyType")
        try container.encodeIfPresent(exDestination, forKey: "exDestination")
        try container.encodeIfPresent(ordStatus, forKey: "ordStatus")
        try container.encodeIfPresent(triggered, forKey: "triggered")
        try container.encodeIfPresent(workingIndicator, forKey: "workingIndicator")
        try container.encodeIfPresent(ordRejReason, forKey: "ordRejReason")
        try container.encodeIfPresent(simpleLeavesQty, forKey: "simpleLeavesQty")
        try container.encodeIfPresent(leavesQty, forKey: "leavesQty")
        try container.encodeIfPresent(simpleCumQty, forKey: "simpleCumQty")
        try container.encodeIfPresent(cumQty, forKey: "cumQty")
        try container.encodeIfPresent(avgPx, forKey: "avgPx")
        try container.encodeIfPresent(commission, forKey: "commission")
        try container.encodeIfPresent(tradePublishIndicator, forKey: "tradePublishIndicator")
        try container.encodeIfPresent(multiLegReportingType, forKey: "multiLegReportingType")
        try container.encodeIfPresent(text, forKey: "text")
        try container.encodeIfPresent(trdMatchID, forKey: "trdMatchID")
        try container.encodeIfPresent(execCost, forKey: "execCost")
        try container.encodeIfPresent(execComm, forKey: "execComm")
        try container.encodeIfPresent(homeNotional, forKey: "homeNotional")
        try container.encodeIfPresent(foreignNotional, forKey: "foreignNotional")
        try container.encodeIfPresent(transactTime, forKey: "transactTime")
        try container.encodeIfPresent(timestamp, forKey: "timestamp")
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        execID = try container.decode(String.self, forKey: "execID")
        orderID = try container.decodeIfPresent(String.self, forKey: "orderID")
        clOrdID = try container.decodeIfPresent(String.self, forKey: "clOrdID")
        clOrdLinkID = try container.decodeIfPresent(String.self, forKey: "clOrdLinkID")
        account = try container.decodeIfPresent(Double.self, forKey: "account")
        symbol = try container.decodeIfPresent(String.self, forKey: "symbol")
        side = try container.decodeIfPresent(String.self, forKey: "side")
        lastQty = try container.decodeIfPresent(Double.self, forKey: "lastQty")
        lastPx = try container.decodeIfPresent(Double.self, forKey: "lastPx")
        underlyingLastPx = try container.decodeIfPresent(Double.self, forKey: "underlyingLastPx")
        lastMkt = try container.decodeIfPresent(String.self, forKey: "lastMkt")
        lastLiquidityInd = try container.decodeIfPresent(String.self, forKey: "lastLiquidityInd")
        simpleOrderQty = try container.decodeIfPresent(Double.self, forKey: "simpleOrderQty")
        orderQty = try container.decodeIfPresent(Double.self, forKey: "orderQty")
        price = try container.decodeIfPresent(Double.self, forKey: "price")
        displayQty = try container.decodeIfPresent(Double.self, forKey: "displayQty")
        stopPx = try container.decodeIfPresent(Double.self, forKey: "stopPx")
        pegOffsetValue = try container.decodeIfPresent(Double.self, forKey: "pegOffsetValue")
        pegPriceType = try container.decodeIfPresent(String.self, forKey: "pegPriceType")
        currency = try container.decodeIfPresent(String.self, forKey: "currency")
        settlCurrency = try container.decodeIfPresent(String.self, forKey: "settlCurrency")
        execType = try container.decodeIfPresent(String.self, forKey: "execType")
        ordType = try container.decodeIfPresent(String.self, forKey: "ordType")
        timeInForce = try container.decodeIfPresent(String.self, forKey: "timeInForce")
        execInst = try container.decodeIfPresent(String.self, forKey: "execInst")
        contingencyType = try container.decodeIfPresent(String.self, forKey: "contingencyType")
        exDestination = try container.decodeIfPresent(String.self, forKey: "exDestination")
        ordStatus = try container.decodeIfPresent(String.self, forKey: "ordStatus")
        triggered = try container.decodeIfPresent(String.self, forKey: "triggered")
        workingIndicator = try container.decodeIfPresent(Bool.self, forKey: "workingIndicator")
        ordRejReason = try container.decodeIfPresent(String.self, forKey: "ordRejReason")
        simpleLeavesQty = try container.decodeIfPresent(Double.self, forKey: "simpleLeavesQty")
        leavesQty = try container.decodeIfPresent(Double.self, forKey: "leavesQty")
        simpleCumQty = try container.decodeIfPresent(Double.self, forKey: "simpleCumQty")
        cumQty = try container.decodeIfPresent(Double.self, forKey: "cumQty")
        avgPx = try container.decodeIfPresent(Double.self, forKey: "avgPx")
        commission = try container.decodeIfPresent(Double.self, forKey: "commission")
        tradePublishIndicator = try container.decodeIfPresent(String.self, forKey: "tradePublishIndicator")
        multiLegReportingType = try container.decodeIfPresent(String.self, forKey: "multiLegReportingType")
        text = try container.decodeIfPresent(String.self, forKey: "text")
        trdMatchID = try container.decodeIfPresent(String.self, forKey: "trdMatchID")
        execCost = try container.decodeIfPresent(Double.self, forKey: "execCost")
        execComm = try container.decodeIfPresent(Double.self, forKey: "execComm")
        homeNotional = try container.decodeIfPresent(Double.self, forKey: "homeNotional")
        foreignNotional = try container.decodeIfPresent(Double.self, forKey: "foreignNotional")
        transactTime = try container.decodeIfPresent(Date.self, forKey: "transactTime")
        timestamp = try container.decodeIfPresent(Date.self, forKey: "timestamp")
    }
}

